{"version":3,"sources":["../../src/services/account.service.js"],"names":["AccountService","createAccount","userId","accountType","account","Account","accountResponse","user","UserService","getAUser","type","error","oldAccount","dummyData","accounts","find","singleAccount","owner","id","error2","accountLength","length","lastId","lastAccountNumber","accountNumber","newAccountNumber","newId","createdOn","Date","status","balance","push","firstName","lastName","email","openingBalance","accountStatus","fetchAllAccounts","validAccounts","map","newAccount","deleteAccount","accountIndex","findIndex","splice","name","description","price","getAnAccount"],"mappings":"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","sourcesContent":["/* eslint-disable eqeqeq */\r\nimport dummyData from '../utils/dummyData';\r\nimport Account from '../models/account.model';\r\nimport UserService from './user.service';\r\n\r\nconst AccountService = {\r\n  createAccount(userId, accountType) {\r\n    const account = new Account();\r\n    const accountResponse = {};\r\n    const user = UserService.getAUser(userId);\r\n    if (user.type !== 'client') {\r\n      return { error: 'An account cannot be created for this user' };\r\n    }\r\n    const oldAccount = dummyData.accounts\r\n      .find(singleAccount => singleAccount.owner == user.id);\r\n    if (oldAccount) {\r\n      return { error2: 'User already has an account' };\r\n    }\r\n    const accountLength = dummyData.accounts.length;\r\n    const lastId = dummyData.accounts[accountLength - 1].id;\r\n    const lastAccountNumber = dummyData.accounts[accountLength - 1].accountNumber;\r\n    const newAccountNumber = lastAccountNumber + 1;\r\n    const newId = lastId + 1;\r\n    account.id = newId;\r\n    account.accountNumber = newAccountNumber;\r\n    account.createdOn = new Date();\r\n    account.owner = user.id;\r\n    account.type = accountType;\r\n    account.status = 'draft';\r\n    account.balance = 0.00;\r\n    dummyData.accounts.push(account);\r\n    accountResponse.accountNumber = account.accountNumber;\r\n    accountResponse.firstName = user.firstName;\r\n    accountResponse.lastName = user.lastName;\r\n    accountResponse.email = user.email;\r\n    accountResponse.type = account.type;\r\n    accountResponse.openingBalance = 0.00;\r\n    return accountResponse;\r\n  },\r\n\r\n  accountStatus({ userId }, { accountNumber }, { status }) {\r\n    const user = UserService.getAUser(userId);\r\n    if (user.type === 'client') return { error: 'Unauthorized user' };\r\n    const account = dummyData.accounts\r\n      .find(singleAccount => singleAccount.accountNumber == accountNumber);\r\n    if (!account) return { error2: 'No account found' };\r\n    account.status = status;\r\n    return account;\r\n  },\r\n\r\n  fetchAllAccounts({ userId }) {\r\n    const user = UserService.getAUser(userId);\r\n    if (user.type === 'client') return { error: 'Unauthorized user' };\r\n    const validAccounts = dummyData.accounts.map((singleAccount) => {\r\n      const newAccount = new Account();\r\n      newAccount.id = singleAccount.id;\r\n      newAccount.accountNumber = singleAccount.accountNumber;\r\n      newAccount.createdOn = singleAccount.createdOn;\r\n      newAccount.owner = singleAccount.owner;\r\n      newAccount.type = singleAccount.type;\r\n      newAccount.status = singleAccount.status;\r\n      newAccount.balance = singleAccount.balance;\r\n      return newAccount;\r\n    });\r\n    return validAccounts;\r\n  },\r\n\r\n  deleteAccount({ userId }, { accountNumber }) {\r\n    const user = UserService.getAUser(userId);\r\n    if (user.type === 'client') return { error: 'Unauthorized user' };\r\n    const accountIndex = dummyData.accounts\r\n      .findIndex(account => account.accountNumber == accountNumber);\r\n    if (!accountIndex) return { error2: 'No account found' };\r\n    dummyData.accounts.splice(accountIndex, 1);\r\n    const validAccounts = dummyData.accounts.map((account) => {\r\n      const newAccount = new Account();\r\n      newAccount.id = account.id;\r\n      newAccount.name = account.name;\r\n      newAccount.description = account.description;\r\n      newAccount.price = account.price;\r\n      return newAccount;\r\n    });\r\n\r\n    return validAccounts;\r\n  },\r\n\r\n  getAnAccount(accountNumber) {\r\n    const account = dummyData.accounts\r\n      .find(singleAccount => singleAccount.accountNumber == accountNumber);\r\n    return account || {};\r\n  },\r\n};\r\n\r\nexport default AccountService;\r\n"],"file":"account.service.js"}