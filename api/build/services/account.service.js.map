{"version":3,"sources":["../../src/services/account.service.js"],"names":["AccountService","createAccount","userId","accountType","account","Account","UserService","getAUser","user","type","error","sql","pool","connect","client","query","res","newAccNo","rows","accountnumber","accountNumber","owner","id","status","balance","sql2","sql3","res3","openingBalance","firstName","firstname","lastName","lastname","email","code","detail","release","accountStatus","error2","deleteAccount","rowCount","deleted"],"mappings":"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","sourcesContent":["import Account from '../models/account.model';\r\nimport UserService from './user.service';\r\nimport pool from '../database/database';\r\n\r\nconst AccountService = {\r\n  async createAccount(userId, accountType) {\r\n    const account = new Account();\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type !== 'client') {\r\n      return { error: 'An account cannot be created for this user' };\r\n    }\r\n    const sql = `\r\n        SELECT accountNumber FROM Accounts ORDER BY id DESC LIMIT 1;\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      const newAccNo = res.rows[0].accountnumber + 1;\r\n      account.accountNumber = newAccNo;\r\n      account.owner = user.id;\r\n      account.type = accountType;\r\n      account.status = 'draft';\r\n      account.balance = 0.00;\r\n      const sql2 = `\r\n      INSERT INTO Accounts(\r\n        accountNumber,\r\n        owner,\r\n        type,\r\n        status,\r\n        balance\r\n        ) \r\n        VALUES (\r\n          '${account.accountNumber}',\r\n          '${account.owner}',\r\n          '${account.type}',\r\n          '${account.status}',\r\n          '${account.balance}'\r\n          );\r\n    `;\r\n      await client.query(sql2);\r\n      const sql3 = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${account.accountNumber}; \r\n      `;\r\n      const res3 = await client.query(sql3);\r\n      const {\r\n        accountnumber: accountNumber,\r\n        type,\r\n        balance: openingBalance,\r\n      } = res3.rows[0];\r\n      return {\r\n        accountNumber,\r\n        firstName: user.firstname,\r\n        lastName: user.lastname,\r\n        email: user.email,\r\n        type,\r\n        openingBalance,\r\n      };\r\n    } catch (err) {\r\n      if (err.code === '23505') {\r\n        return { error: err.detail };\r\n      }\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async accountStatus({ userId }, { accountNumber }, { status }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type === 'client') return { error: 'Unauthorized user' };\r\n    const sql = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${accountNumber};\r\n      `;\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      const account = res.rows[0];\r\n      if (!account) return { error2: 'No account found' };\r\n      const sql2 = `\r\n        UPDATE Accounts SET status = '${status}' WHERE accountNumber = ${accountNumber};\r\n      `;\r\n      await client.query(sql2);\r\n      return {\r\n        accountNumber,\r\n        status,\r\n      };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async deleteAccount({ userId }, { accountNumber }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type === 'client') return { error: 'Unauthorized user' };\r\n    const sql = `\r\n        DELETE FROM Accounts WHERE accountNumber='${accountNumber}';\r\n      `;\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) return { error2: 'No account found' };\r\n      return {\r\n        deleted: 'Account successfully deleted',\r\n      };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n};\r\n\r\nexport default AccountService;\r\n"],"file":"account.service.js"}