{"version":3,"sources":["../../src/services/account.service.js"],"names":["AccountService","createAccount","userId","accountType","account","Account","UserService","getAUser","user","type","error","sql","pool","connect","client","query","res","rowNum","rowCount","lastAccNo","rows","newAccNo","accountnumber","accountNumber","owner","id","status","balance","sql2","sql3","res3","openingBalance","firstName","firstname","lastName","lastname","email","release","accountStatus","error2","deleteAccount","deleted"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,cAAc,GAAG;AACfC,EAAAA,aADe;AAAA;AAAA;AAAA,kDACDC,MADC,EACOC,WADP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEbC,cAAAA,OAFa,GAEH,IAAIC,mBAAJ,EAFG;AAAA;AAAA,qBAGAC,iBAAYC,QAAZ,CAAqBL,MAArB,CAHA;;AAAA;AAGbM,cAAAA,IAHa;;AAAA,oBAIfA,IAAI,CAACC,IAAL,KAAc,QAJC;AAAA;AAAA;AAAA;;AAAA,+CAKV;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eALU;;AAAA;AAObC,cAAAA,GAPa;AAAA;AAAA,qBAWEC,qBAAKC,OAAL,EAXF;;AAAA;AAWbC,cAAAA,MAXa;AAAA;AAAA;AAAA,qBAaCA,MAAM,CAACC,KAAP,CAAaJ,GAAb,CAbD;;AAAA;AAaXK,cAAAA,GAbW;AAcXC,cAAAA,MAdW,GAcFD,GAAG,CAACE,QAdF;AAeXC,cAAAA,SAfW,GAeCH,GAAG,CAACI,IAAJ,CAASH,MAAM,GAAG,CAAlB,CAfD;AAgBXI,cAAAA,QAhBW,GAgBAF,SAAS,CAACG,aAAV,GAA0B,CAhB1B;AAiBjBlB,cAAAA,OAAO,CAACmB,aAAR,GAAwBF,QAAxB;AACAjB,cAAAA,OAAO,CAACoB,KAAR,GAAgBhB,IAAI,CAACiB,EAArB;AACArB,cAAAA,OAAO,CAACK,IAAR,GAAeN,WAAf;AACAC,cAAAA,OAAO,CAACsB,MAAR,GAAiB,OAAjB;AACAtB,cAAAA,OAAO,CAACuB,OAAR,GAAkB,IAAlB;AACMC,cAAAA,IAtBW,8KA+BVxB,OAAO,CAACmB,aA/BE,4BAgCVnB,OAAO,CAACoB,KAhCE,4BAiCVpB,OAAO,CAACK,IAjCE,4BAkCVL,OAAO,CAACsB,MAlCE,4BAmCVtB,OAAO,CAACuB,OAnCE;AAAA;AAAA,qBAsCXb,MAAM,CAACC,KAAP,CAAaa,IAAb,CAtCW;;AAAA;AAuCXC,cAAAA,IAvCW,kEAwC8BzB,OAAO,CAACmB,aAxCtC;AAAA;AAAA,qBA0CET,MAAM,CAACC,KAAP,CAAac,IAAb,CA1CF;;AAAA;AA0CXC,cAAAA,IA1CW;AAAA,4BA+CbA,IAAI,CAACV,IAAL,CAAU,CAAV,CA/Ca,EA4CAG,aA5CA,eA4CfD,aA5Ce,EA6Cfb,IA7Ce,eA6CfA,IA7Ce,EA8CNsB,cA9CM,eA8CfJ,OA9Ce;AAAA,+CAgDV;AACLJ,gBAAAA,aAAa,EAAbA,aADK;AAELS,gBAAAA,SAAS,EAAExB,IAAI,CAACyB,SAFX;AAGLC,gBAAAA,QAAQ,EAAE1B,IAAI,CAAC2B,QAHV;AAILC,gBAAAA,KAAK,EAAE5B,IAAI,CAAC4B,KAJP;AAKL3B,gBAAAA,IAAI,EAAJA,IALK;AAMLsB,gBAAAA,cAAc,EAAdA;AANK,eAhDU;;AAAA;AAAA;AAyDjBjB,cAAAA,MAAM,CAACuB,OAAP;AAzDiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6DfC,EAAAA,aA7De;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6DCpC,cAAAA,MA7DD,QA6DCA,MA7DD;AA6DaqB,cAAAA,aA7Db,SA6DaA,aA7Db;AA6DgCG,cAAAA,MA7DhC,SA6DgCA,MA7DhC;AAAA;AAAA,qBA8DApB,iBAAYC,QAAZ,CAAqBL,MAArB,CA9DA;;AAAA;AA8DbM,cAAAA,IA9Da;;AAAA,oBA+DfA,IAAI,CAACC,IAAL,KAAc,QA/DC;AAAA;AAAA;AAAA;;AAAA,gDA+DgB;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eA/DhB;;AAAA;AAgEbC,cAAAA,GAhEa,kEAiE8BY,aAjE9B;AAAA;AAAA,qBAmEEX,qBAAKC,OAAL,EAnEF;;AAAA;AAmEbC,cAAAA,MAnEa;AAAA;AAAA;AAAA,qBAqECA,MAAM,CAACC,KAAP,CAAaJ,GAAb,CArED;;AAAA;AAqEXK,cAAAA,GArEW;AAsEXZ,cAAAA,OAtEW,GAsEDY,GAAG,CAACI,IAAJ,CAAS,CAAT,CAtEC;;AAAA,kBAuEZhB,OAvEY;AAAA;AAAA;AAAA;;AAAA,gDAuEI;AAAEmC,gBAAAA,MAAM,EAAE;AAAV,eAvEJ;;AAAA;AAwEXX,cAAAA,IAxEW,qDAyEiBF,MAzEjB,qCAyEkDH,aAzElD;AAAA;AAAA,qBA2EXT,MAAM,CAACC,KAAP,CAAaa,IAAb,CA3EW;;AAAA;AAAA,gDA4EV;AACLL,gBAAAA,aAAa,EAAbA,aADK;AAELG,gBAAAA,MAAM,EAANA;AAFK,eA5EU;;AAAA;AAAA;AAiFjBZ,cAAAA,MAAM,CAACuB,OAAP;AAjFiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqFrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEMG,EAAAA,aAtGe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsGCtC,cAAAA,MAtGD,SAsGCA,MAtGD;AAsGaqB,cAAAA,aAtGb,SAsGaA,aAtGb;AAAA;AAAA,qBAuGAjB,iBAAYC,QAAZ,CAAqBL,MAArB,CAvGA;;AAAA;AAuGbM,cAAAA,IAvGa;;AAAA,oBAwGfA,IAAI,CAACC,IAAL,KAAc,QAxGC;AAAA;AAAA;AAAA;;AAAA,gDAwGgB;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAxGhB;;AAAA;AAyGbC,cAAAA,GAzGa,iEA0G6BY,aA1G7B;AAAA;AAAA,qBA4GEX,qBAAKC,OAAL,EA5GF;;AAAA;AA4GbC,cAAAA,MA5Ga;AAAA;AAAA;AAAA,qBA8GCA,MAAM,CAACC,KAAP,CAAaJ,GAAb,CA9GD;;AAAA;AA8GXK,cAAAA,GA9GW;;AAAA,oBA+GbA,GAAG,CAACE,QAAJ,GAAe,CA/GF;AAAA;AAAA;AAAA;;AAAA,gDA+GY;AAAEqB,gBAAAA,MAAM,EAAE;AAAV,eA/GZ;;AAAA;AAAA,gDAgHV;AACLE,gBAAAA,OAAO,EAAE;AADJ,eAhHU;;AAAA;AAAA;AAoHjB3B,cAAAA,MAAM,CAACuB,OAAP;AApHiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAvB;eA+HerC,c","sourcesContent":["import Account from '../models/account.model';\r\nimport UserService from './user.service';\r\nimport pool from '../database/database';\r\n\r\nconst AccountService = {\r\n  async createAccount(userId, accountType) {\r\n    const account = new Account();\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type !== 'client') {\r\n      return { error: 'An account cannot be created for this user' };\r\n    }\r\n    const sql = `\r\n        SELECT accountNumber FROM Accounts;\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      const rowNum = res.rowCount;\r\n      const lastAccNo = res.rows[rowNum - 1];\r\n      const newAccNo = lastAccNo.accountnumber + 1;\r\n      account.accountNumber = newAccNo;\r\n      account.owner = user.id;\r\n      account.type = accountType;\r\n      account.status = 'draft';\r\n      account.balance = 0.00;\r\n      const sql2 = `\r\n      INSERT INTO Accounts(\r\n        accountNumber,\r\n        owner,\r\n        type,\r\n        status,\r\n        balance\r\n        ) \r\n        VALUES (\r\n          '${account.accountNumber}',\r\n          '${account.owner}',\r\n          '${account.type}',\r\n          '${account.status}',\r\n          '${account.balance}'\r\n          );\r\n    `;\r\n      await client.query(sql2);\r\n      const sql3 = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${account.accountNumber}; \r\n      `;\r\n      const res3 = await client.query(sql3);\r\n      const {\r\n        accountnumber: accountNumber,\r\n        type,\r\n        balance: openingBalance,\r\n      } = res3.rows[0];\r\n      return {\r\n        accountNumber,\r\n        firstName: user.firstname,\r\n        lastName: user.lastname,\r\n        email: user.email,\r\n        type,\r\n        openingBalance,\r\n      };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async accountStatus({ userId }, { accountNumber }, { status }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type === 'client') return { error: 'Unauthorized user' };\r\n    const sql = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${accountNumber};\r\n      `;\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      const account = res.rows[0];\r\n      if (!account) return { error2: 'No account found' };\r\n      const sql2 = `\r\n        UPDATE Accounts SET status = '${status}' WHERE accountNumber = ${accountNumber};\r\n      `;\r\n      await client.query(sql2);\r\n      return {\r\n        accountNumber,\r\n        status,\r\n      };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  // fetchAllAccounts({ userId }) {\r\n  //   const user = UserService.getAUser(userId);\r\n  //   if (user.type === 'client') return { error: 'Unauthorized user' };\r\n  //   const validAccounts = dummyData.accounts.map((singleAccount) => {\r\n  //     const newAccount = new Account();\r\n  //     newAccount.id = singleAccount.id;\r\n  //     newAccount.accountNumber = singleAccount.accountNumber;\r\n  //     newAccount.createdOn = singleAccount.createdOn;\r\n  //     newAccount.owner = singleAccount.owner;\r\n  //     newAccount.type = singleAccount.type;\r\n  //     newAccount.status = singleAccount.status;\r\n  //     newAccount.balance = singleAccount.balance;\r\n  //     return newAccount;\r\n  //   });\r\n  //   return validAccounts;\r\n  // },\r\n\r\n  async deleteAccount({ userId }, { accountNumber }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type === 'client') return { error: 'Unauthorized user' };\r\n    const sql = `\r\n        DELETE FROM Accounts WHERE accountNumber='${accountNumber}';\r\n      `;\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) return { error2: 'No account found' };\r\n      return {\r\n        deleted: 'Account successfully deleted',\r\n      };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  // getAnAccount(accountNumber) {\r\n  //   const account = dummyData.accounts\r\n  //     .find(singleAccount => singleAccount.accountNumber == accountNumber);\r\n  //   return account || {};\r\n  // },\r\n};\r\n\r\nexport default AccountService;\r\n"],"file":"account.service.js"}