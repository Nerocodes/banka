{"version":3,"sources":["../../src/services/account.service.js"],"names":["AccountService","createAccount","userId","accountType","account","Account","UserService","getAUser","user","type","error","sql","pool","connect","client","query","res","newAccNo","rows","accountnumber","accountNumber","owner","id","status","balance","sql2","sql3","res3","openingBalance","firstName","firstname","lastName","lastname","email","detail","release","accountStatus","error2","deleteAccount","rowCount","deleted","transactionHistory","error1","history","map","transaction","transactionId","createdOn","createdon","amount","oldBalance","oldbalance","newBalance","newbalance","transactionRes","push","getSingleAccount","ownerEmail","getAllAccounts","staff","accounts","accountsPromise","Promise","all"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,cAAc,GAAG;AACfC,EAAAA,aADe;AAAA;AAAA;AAAA,kDACDC,MADC,EACOC,WADP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEbC,cAAAA,OAFa,GAEH,IAAIC,mBAAJ,EAFG;AAAA;AAAA,qBAGAC,iBAAYC,QAAZ,CAAqBL,MAArB,CAHA;;AAAA;AAGbM,cAAAA,IAHa;;AAAA,oBAIfA,IAAI,CAACC,IAAL,KAAc,QAJC;AAAA;AAAA;AAAA;;AAAA,+CAKV;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eALU;;AAAA;AAObC,cAAAA,GAPa;AAAA;AAAA,qBAWEC,qBAAKC,OAAL,EAXF;;AAAA;AAWbC,cAAAA,MAXa;AAAA;AAAA;AAAA,qBAaCA,MAAM,CAACC,KAAP,CAAaJ,GAAb,CAbD;;AAAA;AAaXK,cAAAA,GAbW;AAcXC,cAAAA,QAdW,GAcAD,GAAG,CAACE,IAAJ,CAAS,CAAT,EAAYC,aAAZ,GAA4B,CAd5B;AAejBf,cAAAA,OAAO,CAACgB,aAAR,GAAwBH,QAAxB;AACAb,cAAAA,OAAO,CAACiB,KAAR,GAAgBb,IAAI,CAACc,EAArB;AACAlB,cAAAA,OAAO,CAACK,IAAR,GAAeN,WAAf;AACAC,cAAAA,OAAO,CAACmB,MAAR,GAAiB,OAAjB;AACAnB,cAAAA,OAAO,CAACoB,OAAR,GAAkB,IAAlB;AACMC,cAAAA,IApBW,8KA6BVrB,OAAO,CAACgB,aA7BE,4BA8BVhB,OAAO,CAACiB,KA9BE,4BA+BVjB,OAAO,CAACK,IA/BE,4BAgCVL,OAAO,CAACmB,MAhCE,4BAiCVnB,OAAO,CAACoB,OAjCE;AAAA;AAAA,qBAoCXV,MAAM,CAACC,KAAP,CAAaU,IAAb,CApCW;;AAAA;AAqCXC,cAAAA,IArCW,kEAsC8BtB,OAAO,CAACgB,aAtCtC;AAAA;AAAA,qBAwCEN,MAAM,CAACC,KAAP,CAAaW,IAAb,CAxCF;;AAAA;AAwCXC,cAAAA,IAxCW;AAAA,4BA6CbA,IAAI,CAACT,IAAL,CAAU,CAAV,CA7Ca,EA0CAE,aA1CA,eA0CfD,aA1Ce,EA2CfV,IA3Ce,eA2CfA,IA3Ce,EA4CNmB,cA5CM,eA4CfJ,OA5Ce;AAAA,+CA8CV;AACLJ,gBAAAA,aAAa,EAAbA,aADK;AAELS,gBAAAA,SAAS,EAAErB,IAAI,CAACsB,SAFX;AAGLC,gBAAAA,QAAQ,EAAEvB,IAAI,CAACwB,QAHV;AAILC,gBAAAA,KAAK,EAAEzB,IAAI,CAACyB,KAJP;AAKLxB,gBAAAA,IAAI,EAAJA,IALK;AAMLmB,gBAAAA,cAAc,EAAdA;AANK,eA9CU;;AAAA;AAAA;AAAA;AAAA,+CAuDV;AAAElB,gBAAAA,KAAK,EAAE,YAAIwB;AAAb,eAvDU;;AAAA;AAAA;AAyDjBpB,cAAAA,MAAM,CAACqB,OAAP;AAzDiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6DfC,EAAAA,aA7De;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6DClC,cAAAA,MA7DD,QA6DCA,MA7DD;AA6DakB,cAAAA,aA7Db,SA6DaA,aA7Db;AA6DgCG,cAAAA,MA7DhC,SA6DgCA,MA7DhC;AAAA;AAAA,qBA8DAjB,iBAAYC,QAAZ,CAAqBL,MAArB,CA9DA;;AAAA;AA8DbM,cAAAA,IA9Da;;AAAA,oBA+DfA,IAAI,CAACC,IAAL,KAAc,QA/DC;AAAA;AAAA;AAAA;;AAAA,gDA+DgB;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eA/DhB;;AAAA;AAgEbC,cAAAA,GAhEa,kEAiE8BS,aAjE9B;AAAA;AAAA,qBAmEER,qBAAKC,OAAL,EAnEF;;AAAA;AAmEbC,cAAAA,MAnEa;AAAA;AAAA;AAAA,qBAqECA,MAAM,CAACC,KAAP,CAAaJ,GAAb,CArED;;AAAA;AAqEXK,cAAAA,GArEW;AAsEXZ,cAAAA,OAtEW,GAsEDY,GAAG,CAACE,IAAJ,CAAS,CAAT,CAtEC;;AAAA,kBAuEZd,OAvEY;AAAA;AAAA;AAAA;;AAAA,gDAuEI;AAAEiC,gBAAAA,MAAM,EAAE;AAAV,eAvEJ;;AAAA;AAwEXZ,cAAAA,IAxEW,qDAyEiBF,MAzEjB,qCAyEkDH,aAzElD;AAAA;AAAA,qBA2EXN,MAAM,CAACC,KAAP,CAAaU,IAAb,CA3EW;;AAAA;AAAA,gDA4EV;AACLL,gBAAAA,aAAa,EAAbA,aADK;AAELG,gBAAAA,MAAM,EAANA;AAFK,eA5EU;;AAAA;AAAA;AAAA;AAAA,gDAiFV;AAAEb,gBAAAA,KAAK,EAAE,aAAIwB;AAAb,eAjFU;;AAAA;AAAA;AAmFjBpB,cAAAA,MAAM,CAACqB,OAAP;AAnFiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuFfG,EAAAA,aAvFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuFCpC,cAAAA,MAvFD,SAuFCA,MAvFD;AAuFakB,cAAAA,aAvFb,SAuFaA,aAvFb;AAAA;AAAA,qBAwFAd,iBAAYC,QAAZ,CAAqBL,MAArB,CAxFA;;AAAA;AAwFbM,cAAAA,IAxFa;;AAAA,oBAyFfA,IAAI,CAACC,IAAL,KAAc,QAzFC;AAAA;AAAA;AAAA;;AAAA,gDAyFgB;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAzFhB;;AAAA;AA0FbC,cAAAA,GA1Fa,iEA2F6BS,aA3F7B;AAAA;AAAA,qBA6FER,qBAAKC,OAAL,EA7FF;;AAAA;AA6FbC,cAAAA,MA7Fa;AAAA;AAAA;AAAA,qBA+FCA,MAAM,CAACC,KAAP,CAAaJ,GAAb,CA/FD;;AAAA;AA+FXK,cAAAA,GA/FW;;AAAA,oBAgGbA,GAAG,CAACuB,QAAJ,GAAe,CAhGF;AAAA;AAAA;AAAA;;AAAA,gDAgGY;AAAEF,gBAAAA,MAAM,EAAE;AAAV,eAhGZ;;AAAA;AAAA,gDAiGV;AACLG,gBAAAA,OAAO,EAAE;AADJ,eAjGU;;AAAA;AAAA;AAAA;AAAA,gDAqGV;AAAE9B,gBAAAA,KAAK,EAAE,aAAIwB;AAAb,eArGU;;AAAA;AAAA;AAuGjBpB,cAAAA,MAAM,CAACqB,OAAP;AAvGiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2GfM,EAAAA,kBA3Ge;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2GMrB,cAAAA,aA3GN,SA2GMA,aA3GN;AA4GbT,cAAAA,GA5Ga,mEA6G+BS,aA7G/B;AAAA;AAAA,qBA+GER,qBAAKC,OAAL,EA/GF;;AAAA;AA+GbC,cAAAA,MA/Ga;AAAA;AAAA;AAAA,qBAiHCA,MAAM,CAACC,KAAP,CAAaJ,GAAb,CAjHD;;AAAA;AAiHXK,cAAAA,GAjHW;;AAAA,oBAkHbA,GAAG,CAACuB,QAAJ,GAAe,CAlHF;AAAA;AAAA;AAAA;;AAAA,gDAmHR;AAAEG,gBAAAA,MAAM,EAAE;AAAV,eAnHQ;;AAAA;AAqHXC,cAAAA,OArHW,GAqHD,EArHC;AAsHjB3B,cAAAA,GAAG,CAACE,IAAJ,CAAS0B,GAAT,CAAa,UAACC,WAAD,EAAiB;AAAA,oBAEtBC,aAFsB,GAQxBD,WARwB,CAE1BvB,EAF0B;AAAA,oBAGfyB,SAHe,GAQxBF,WARwB,CAG1BG,SAH0B;AAAA,oBAI1BvC,IAJ0B,GAQxBoC,WARwB,CAI1BpC,IAJ0B;AAAA,oBAK1BwC,MAL0B,GAQxBJ,WARwB,CAK1BI,MAL0B;AAAA,oBAMdC,UANc,GAQxBL,WARwB,CAM1BM,UAN0B;AAAA,oBAOdC,UAPc,GAQxBP,WARwB,CAO1BQ,UAP0B;AAS5B,oBAAMC,cAAc,GAAG;AACrBR,kBAAAA,aAAa,EAAbA,aADqB;AAErBC,kBAAAA,SAAS,EAATA,SAFqB;AAGrBtC,kBAAAA,IAAI,EAAJA,IAHqB;AAIrBW,kBAAAA,aAAa,EAAbA,aAJqB;AAKrB6B,kBAAAA,MAAM,EAANA,MALqB;AAMrBC,kBAAAA,UAAU,EAAVA,UANqB;AAOrBE,kBAAAA,UAAU,EAAVA;AAPqB,iBAAvB;AASA,uBAAOT,OAAO,CAACY,IAAR,CAAaD,cAAb,CAAP;AACD,eAnBD;AAtHiB,gDA0IVX,OA1IU;;AAAA;AAAA;AAAA;AAAA,gDA4IV;AAAEjC,gBAAAA,KAAK,EAAE,aAAIwB;AAAb,eA5IU;;AAAA;AAAA;AA8IjBpB,cAAAA,MAAM,CAACqB,OAAP;AA9IiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkJfqB,EAAAA,gBAlJe;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkJIpC,cAAAA,aAlJJ,SAkJIA,aAlJJ;AAmJbT,cAAAA,GAnJa,kEAoJ8BS,aApJ9B;AAAA;AAAA,qBAsJER,qBAAKC,OAAL,EAtJF;;AAAA;AAsJbC,cAAAA,MAtJa;AAAA;AAAA;AAAA,qBAwJCA,MAAM,CAACC,KAAP,CAAaJ,GAAb,CAxJD;;AAAA;AAwJXK,cAAAA,GAxJW;;AAAA,oBAyJbA,GAAG,CAACuB,QAAJ,GAAe,CAzJF;AAAA;AAAA;AAAA;;AAAA,gDAyJY;AAAE7B,gBAAAA,KAAK,EAAE;AAAT,eAzJZ;;AAAA;AAAA,2BAgKbM,GAAG,CAACE,IAAJ,CAAS,CAAT,CAhKa,EA2JJ6B,SA3JI,cA2JfC,SA3Je,EA4JR9C,MA5JQ,cA4JfmB,KA5Je,EA6JfZ,IA7Je,cA6JfA,IA7Je,EA8Jfc,MA9Je,cA8JfA,MA9Je,EA+JfC,OA/Je,cA+JfA,OA/Je;AAAA;AAAA,qBAiKElB,iBAAYC,QAAZ,CAAqBL,MAArB,CAjKF;;AAAA;AAiKXM,cAAAA,IAjKW;AAAA,gDAkKV;AACLuC,gBAAAA,SAAS,EAATA,SADK;AAEL3B,gBAAAA,aAAa,EAAbA,aAFK;AAGLqC,gBAAAA,UAAU,EAAEjD,IAAI,CAACyB,KAHZ;AAILxB,gBAAAA,IAAI,EAAJA,IAJK;AAKLc,gBAAAA,MAAM,EAANA,MALK;AAMLC,gBAAAA,OAAO,EAAPA;AANK,eAlKU;;AAAA;AAAA;AAAA;AAAA,gDA2KV;AAAEd,gBAAAA,KAAK,EAAE,aAAIwB;AAAb,eA3KU;;AAAA;AAAA;AA6KjBpB,cAAAA,MAAM,CAACqB,OAAP;AA7KiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiLfuB,EAAAA,cAjLe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiLExD,cAAAA,MAjLF,SAiLEA,MAjLF,EAiLUa,KAjLV,SAiLUA,KAjLV;AAAA;AAAA,qBAkLCT,iBAAYC,QAAZ,CAAqBL,MAArB,CAlLD;;AAAA;AAkLbyD,cAAAA,KAlLa;;AAAA,oBAmLfA,KAAK,CAAClD,IAAN,KAAe,QAnLA;AAAA;AAAA;AAAA;;AAAA,gDAmLiB;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAnLjB;;AAAA;AAoLfC,cAAAA,GApLe,GAoLT,EApLS;;AAqLnB,kBAAII,KAAK,CAACQ,MAAV,EAAkB;AAChBZ,gBAAAA,GAAG,4DACsCI,KAAK,CAACQ,MAD5C,eAAH;AAGD,eAJD,MAIO;AACLZ,gBAAAA,GAAG,8CAAH;AAGD;;AA7LkB;AAAA,qBA8LEC,qBAAKC,OAAL,EA9LF;;AAAA;AA8LbC,cAAAA,MA9La;AAAA;AAAA;AAAA,qBAgMCA,MAAM,CAACC,KAAP,CAAaJ,GAAb,CAhMD;;AAAA;AAgMXK,cAAAA,GAhMW;AAiMX4C,cAAAA,QAjMW,GAiMA,EAjMA;AAkMXC,cAAAA,eAlMW,GAkMO7C,GAAG,CAACE,IAAJ,CAAS0B,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAa,kBAAOxC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtB2C,0BAAAA,SAFsB,GAQ/B3C,OAR+B,CAEjC4C,SAFiC,EAG1B1B,EAH0B,GAQ/BlB,OAR+B,CAGjCiB,KAHiC,EAIjCZ,IAJiC,GAQ/BL,OAR+B,CAIjCK,IAJiC,EAKlBW,aALkB,GAQ/BhB,OAR+B,CAKjCe,aALiC,EAMjCI,MANiC,GAQ/BnB,OAR+B,CAMjCmB,MANiC,EAOjCC,OAPiC,GAQ/BpB,OAR+B,CAOjCoB,OAPiC;AAAA;AAAA,iCAShBlB,iBAAYC,QAAZ,CAAqBe,EAArB,CATgB;;AAAA;AAS7Bd,0BAAAA,IAT6B;AAAA,4DAU5BoD,QAAQ,CAACL,IAAT,CAAc;AACnBR,4BAAAA,SAAS,EAATA,SADmB;AAEnB3B,4BAAAA,aAAa,EAAbA,aAFmB;AAGnBqC,4BAAAA,UAAU,EAAEjD,IAAI,CAACyB,KAHE;AAInBxB,4BAAAA,IAAI,EAAJA,IAJmB;AAKnBc,4BAAAA,MAAM,EAANA,MALmB;AAMnBC,4BAAAA,OAAO,EAAPA;AANmB,2BAAd,CAV4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAb;;AAAA;AAAA;AAAA;AAAA,kBAlMP;AAAA;AAAA,qBAqNXsC,OAAO,CAACC,GAAR,CAAYF,eAAZ,CArNW;;AAAA;AAAA,gDAsNVD,QAtNU;;AAAA;AAAA;AAAA;AAAA,gDAwNV;AAAElD,gBAAAA,KAAK,EAAE,aAAIwB;AAAb,eAxNU;;AAAA;AAAA;AA0NjBpB,cAAAA,MAAM,CAACqB,OAAP;AA1NiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAvB;eA+NenC,c","sourcesContent":["import Account from '../models/account.model';\r\nimport UserService from './user.service';\r\nimport pool from '../database/database';\r\n\r\nconst AccountService = {\r\n  async createAccount(userId, accountType) {\r\n    const account = new Account();\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type !== 'client') {\r\n      return { error: 'An account cannot be created for this user' };\r\n    }\r\n    const sql = `\r\n        SELECT accountNumber FROM Accounts ORDER BY id DESC LIMIT 1;\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      const newAccNo = res.rows[0].accountnumber + 1;\r\n      account.accountNumber = newAccNo;\r\n      account.owner = user.id;\r\n      account.type = accountType;\r\n      account.status = 'draft';\r\n      account.balance = 0.00;\r\n      const sql2 = `\r\n      INSERT INTO Accounts(\r\n        accountNumber,\r\n        owner,\r\n        type,\r\n        status,\r\n        balance\r\n        ) \r\n        VALUES (\r\n          '${account.accountNumber}',\r\n          '${account.owner}',\r\n          '${account.type}',\r\n          '${account.status}',\r\n          '${account.balance}'\r\n          );\r\n    `;\r\n      await client.query(sql2);\r\n      const sql3 = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${account.accountNumber}; \r\n      `;\r\n      const res3 = await client.query(sql3);\r\n      const {\r\n        accountnumber: accountNumber,\r\n        type,\r\n        balance: openingBalance,\r\n      } = res3.rows[0];\r\n      return {\r\n        accountNumber,\r\n        firstName: user.firstname,\r\n        lastName: user.lastname,\r\n        email: user.email,\r\n        type,\r\n        openingBalance,\r\n      };\r\n    } catch (err) {\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async accountStatus({ userId }, { accountNumber }, { status }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type === 'client') return { error: 'Unauthorized user' };\r\n    const sql = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${accountNumber};\r\n      `;\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      const account = res.rows[0];\r\n      if (!account) return { error2: 'No account found' };\r\n      const sql2 = `\r\n        UPDATE Accounts SET status = '${status}' WHERE accountNumber = ${accountNumber};\r\n      `;\r\n      await client.query(sql2);\r\n      return {\r\n        accountNumber,\r\n        status,\r\n      };\r\n    } catch (err) {\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async deleteAccount({ userId }, { accountNumber }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type === 'client') return { error: 'Unauthorized user' };\r\n    const sql = `\r\n        DELETE FROM Accounts WHERE accountNumber='${accountNumber}';\r\n      `;\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) return { error2: 'No account found' };\r\n      return {\r\n        deleted: 'Account successfully deleted',\r\n      };\r\n    } catch (err) {\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async transactionHistory({ accountNumber }) {\r\n    const sql = `\r\n    SELECT * FROM Transactions WHERE accountNumber='${accountNumber}' ORDER BY createdOn DESC;\r\n    `;\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) {\r\n        return { error1: 'No transaction history' };\r\n      }\r\n      const history = [];\r\n      res.rows.map((transaction) => {\r\n        const {\r\n          id: transactionId,\r\n          createdon: createdOn,\r\n          type,\r\n          amount,\r\n          oldbalance: oldBalance,\r\n          newbalance: newBalance,\r\n        } = transaction;\r\n        const transactionRes = {\r\n          transactionId,\r\n          createdOn,\r\n          type,\r\n          accountNumber,\r\n          amount,\r\n          oldBalance,\r\n          newBalance,\r\n        };\r\n        return history.push(transactionRes);\r\n      });\r\n      return history;\r\n    } catch (err) {\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async getSingleAccount({ accountNumber }) {\r\n    const sql = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${accountNumber};\r\n      `;\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) return { error: 'No account with this account number' };\r\n      const {\r\n        createdon: createdOn,\r\n        owner: userId,\r\n        type,\r\n        status,\r\n        balance,\r\n      } = res.rows[0];\r\n      const user = await UserService.getAUser(userId);\r\n      return {\r\n        createdOn,\r\n        accountNumber,\r\n        ownerEmail: user.email,\r\n        type,\r\n        status,\r\n        balance,\r\n      };\r\n    } catch (err) {\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async getAllAccounts({ userId, query }) {\r\n    const staff = await UserService.getAUser(userId);\r\n    if (staff.type === 'client') return { error: 'Unauthorized user' };\r\n    let sql = '';\r\n    if (query.status) {\r\n      sql = `\r\n        SELECT * FROM Accounts Where status='${query.status}';\r\n      `;\r\n    } else {\r\n      sql = `\r\n        SELECT * FROM Accounts;\r\n      `;\r\n    }\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      const accounts = [];\r\n      const accountsPromise = res.rows.map(async (account) => {\r\n        const {\r\n          createdon: createdOn,\r\n          owner: id,\r\n          type,\r\n          accountnumber: accountNumber,\r\n          status,\r\n          balance,\r\n        } = account;\r\n        const user = await UserService.getAUser(id);\r\n        return accounts.push({\r\n          createdOn,\r\n          accountNumber,\r\n          ownerEmail: user.email,\r\n          type,\r\n          status,\r\n          balance,\r\n        });\r\n      });\r\n      await Promise.all(accountsPromise);\r\n      return accounts;\r\n    } catch (err) {\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n};\r\n\r\nexport default AccountService;\r\n"],"file":"account.service.js"}