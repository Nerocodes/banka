{"version":3,"sources":["../../src/services/user.service.js"],"names":["secret","process","env","SECRET","UserService","addUser","user","newUser","User","sql","firstName","lastName","email","password","type","isAdmin","pool","connect","client","query","signIn","release","res","rows","id","firstname","lastname","isadmin","data","token","jwt","sign","expiresIn","getAUser"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport User from '../models/user.model';\r\nimport pool from '../database/database';\r\n\r\nconst secret = process.env.SECRET || 'supersecret';\r\n\r\n\r\nconst UserService = {\r\n  async addUser(user) {\r\n    let newUser = new User();\r\n    newUser = { ...user };\r\n    const sql = `\r\n    INSERT INTO Users(\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      password,\r\n      type,\r\n      isAdmin\r\n      ) \r\n      VALUES (\r\n        '${newUser.firstName}',\r\n        '${newUser.lastName}',\r\n        '${newUser.email}',\r\n        '${newUser.password}',\r\n        '${newUser.type}',\r\n        '${newUser.isAdmin}'\r\n        );\r\n    `;\r\n    const client = await pool.connect();\r\n    try {\r\n      await client.query(sql);\r\n      return this.signIn(newUser);\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async signIn(user) {\r\n    const sql = `\r\n        SELECT * FROM Users WHERE email='${user.email}';\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      const {\r\n        id,\r\n        firstname: firstName,\r\n        lastname: lastName,\r\n        isadmin: isAdmin,\r\n        ...data\r\n      } = res.rows[0];\r\n      const token = jwt.sign({ id }, secret, {\r\n        expiresIn: 86400, // expires in 24 hours\r\n      });\r\n      return {\r\n        token,\r\n        id,\r\n        firstName,\r\n        lastName,\r\n        email: data.email,\r\n        password: data.password,\r\n        type: data.type,\r\n        isAdmin,\r\n      };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async getAUser(id) {\r\n    const sql = `\r\n        SELECT * FROM Users WHERE id='${id}';\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      return res.rows[0];\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n};\r\n\r\nexport default UserService;\r\n"],"file":"user.service.js"}