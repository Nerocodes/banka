{"version":3,"sources":["../../src/services/user.service.js"],"names":["secret","process","env","SECRET","UserService","addUser","user","newUser","User","hashedPassword","bcrypt","hashSync","password","sql","firstName","lastName","email","type","isAdmin","pool","connect","client","query","signIn","code","error","detail","release","res","rows","id","firstname","lastname","isadmin","data","validPassword","compareSync","token","jwt","sign","expiresIn","getAUser","getUserAccounts","rowCount","sql2","res2","accounts","map","account","createdOn","createdon","accountNumber","accountnumber","status","balance","push"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcryptjs';\r\nimport User from '../models/user.model';\r\nimport pool from '../database/database';\r\n\r\nconst secret = process.env.SECRET || 'supersecret';\r\n\r\n\r\nconst UserService = {\r\n  async addUser(user) {\r\n    let newUser = new User();\r\n    newUser = { ...user };\r\n    const hashedPassword = bcrypt.hashSync(newUser.password, 8);\r\n    newUser.password = hashedPassword;\r\n    const sql = `\r\n    INSERT INTO Users(\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      password,\r\n      type,\r\n      isAdmin\r\n      ) \r\n      VALUES (\r\n        '${newUser.firstName}',\r\n        '${newUser.lastName}',\r\n        '${newUser.email}',\r\n        '${newUser.password}',\r\n        '${newUser.type}',\r\n        '${newUser.isAdmin}'\r\n        );\r\n    `;\r\n    const client = await pool.connect();\r\n    try {\r\n      await client.query(sql);\r\n      return this.signIn(user);\r\n    } catch (err) {\r\n      if (err.code === '23505') {\r\n        return { error: 'An account with this email already exists' };\r\n      }\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async signIn(user) {\r\n    const sql = `\r\n        SELECT * FROM Users WHERE email='${user.email}';\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      const {\r\n        id,\r\n        firstname: firstName,\r\n        lastname: lastName,\r\n        isadmin: isAdmin,\r\n        ...data\r\n      } = res.rows[0];\r\n      const validPassword = bcrypt.compareSync(user.password, data.password);\r\n      if (!validPassword) {\r\n        return { error: 'Wrong password' };\r\n      }\r\n      const token = jwt.sign({ id }, secret, {\r\n        expiresIn: 86400, // expires in 24 hours\r\n      });\r\n      return {\r\n        token,\r\n        id,\r\n        firstName,\r\n        lastName,\r\n        email: data.email,\r\n        type: data.type,\r\n        isAdmin,\r\n      };\r\n    } catch (err) {\r\n      return { error: err };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async getAUser(id) {\r\n    const sql = `\r\n        SELECT * FROM Users WHERE id='${id}';\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      return res.rows[0];\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async getUserAccounts({ email }) {\r\n    const sql = `\r\n        SELECT * FROM Users WHERE email='${email}';\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) {\r\n        return { error: 'No user with this email' };\r\n      }\r\n      const { id } = res.rows[0];\r\n      const sql2 = `\r\n        SELECT * FROM Accounts WHERE owner='${id}';\r\n      `;\r\n      const res2 = await client.query(sql2);\r\n      if (res2.rowCount < 1) {\r\n        return { error: 'User does not have any account' };\r\n      }\r\n      const accounts = [];\r\n      res2.rows.map((account) => {\r\n        const {\r\n          createdon: createdOn,\r\n          accountnumber: accountNumber,\r\n          type,\r\n          status,\r\n          balance,\r\n        } = account;\r\n        return accounts.push({\r\n          createdOn,\r\n          accountNumber,\r\n          type,\r\n          status,\r\n          balance,\r\n        });\r\n      });\r\n      return accounts;\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n};\r\n\r\nexport default UserService;\r\n"],"file":"user.service.js"}