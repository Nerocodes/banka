{"version":3,"sources":["../../src/services/transaction.service.js"],"names":["TransactionService","debitAccount","userId","accountNumber","amount","UserService","getAUser","user","type","isAdmin","error","transaction","Transaction","sql","pool","connect","client","query","res","rowCount","error1","account","rows","accountnumber","cashier","id","oldBalance","balance","error2","newBalance","sql2","sql3","sql4","res4","transactionId","transactionType","accountBalance","newbalance","detail","release","creditAccount","getATransaction","createdOn","createdon","oldbalance"],"mappings":"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","sourcesContent":["/* eslint-disable eqeqeq */\r\nimport Transaction from '../models/transaction.model';\r\nimport UserService from './user.service';\r\nimport pool from '../database/database';\r\n\r\nconst TransactionService = {\r\n  async debitAccount({ userId }, { accountNumber }, { amount }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type !== 'staff' || user.isAdmin == true) return { error: 'Unauthorized user' };\r\n    const transaction = new Transaction();\r\n    const sql = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${accountNumber};\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) return { error1: 'Account number does not match our records' };\r\n      const account = res.rows[0];\r\n      transaction.type = 'debit';\r\n      transaction.accountNumber = account.accountnumber;\r\n      transaction.cashier = user.id;\r\n      transaction.amount = amount;\r\n      transaction.oldBalance = account.balance;\r\n      if (account.balance - amount < 0) return { error2: 'Transaction declined: Insufficient funds' };\r\n      transaction.newBalance = account.balance - amount;\r\n      account.balance = transaction.newBalance;\r\n      const sql2 = `\r\n      INSERT INTO Transactions(\r\n        type,\r\n        accountNumber,\r\n        cashier,\r\n        amount,\r\n        oldBalance,\r\n        newBalance\r\n        ) \r\n        VALUES (\r\n          '${transaction.type}',\r\n          '${transaction.accountNumber}',\r\n          '${transaction.cashier}',\r\n          '${transaction.amount}',\r\n          '${transaction.oldBalance}',\r\n          '${transaction.newBalance}'\r\n          );\r\n    `;\r\n      await client.query(sql2);\r\n      // update account balance\r\n      const sql3 = `\r\n        UPDATE Accounts SET balance = '${transaction.newBalance}' WHERE accountNumber = ${accountNumber};\r\n      `;\r\n      await client.query(sql3);\r\n      const sql4 = `\r\n        SELECT * FROM Transactions ORDER BY id DESC LIMIT 1; \r\n      `;\r\n      const res4 = await client.query(sql4);\r\n      const {\r\n        id: transactionId,\r\n        cashier,\r\n        type: transactionType,\r\n        newbalance: accountBalance,\r\n      } = res4.rows[0];\r\n      return {\r\n        transactionId,\r\n        accountNumber,\r\n        amount,\r\n        cashier,\r\n        transactionType,\r\n        accountBalance,\r\n      };\r\n    } catch (err) {\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async creditAccount({ userId }, { accountNumber }, { amount }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type !== 'staff' || user.isAdmin == true) return { error: 'Unauthorized user' };\r\n    const transaction = new Transaction();\r\n    const sql = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${accountNumber};\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) return { error1: 'Account number does not match our records' };\r\n      const account = res.rows[0];\r\n      transaction.type = 'credit';\r\n      transaction.accountNumber = account.accountnumber;\r\n      transaction.cashier = user.id;\r\n      transaction.amount = amount;\r\n      transaction.oldBalance = account.balance;\r\n      transaction.newBalance = account.balance + amount;\r\n      account.balance = transaction.newBalance;\r\n      const sql2 = `\r\n      INSERT INTO Transactions(\r\n        type,\r\n        accountNumber,\r\n        cashier,\r\n        amount,\r\n        oldBalance,\r\n        newBalance\r\n        ) \r\n        VALUES (\r\n          '${transaction.type}',\r\n          '${transaction.accountNumber}',\r\n          '${transaction.cashier}',\r\n          '${transaction.amount}',\r\n          '${transaction.oldBalance}',\r\n          '${transaction.newBalance}'\r\n          );\r\n    `;\r\n      await client.query(sql2);\r\n      // update account balance\r\n      const sql3 = `\r\n        UPDATE Accounts SET balance = '${transaction.newBalance}' WHERE accountNumber = ${accountNumber};\r\n      `;\r\n      await client.query(sql3);\r\n      const sql4 = `\r\n        SELECT * FROM Transactions ORDER BY id DESC LIMIT 1; \r\n      `;\r\n      const res4 = await client.query(sql4);\r\n      const {\r\n        id: transactionId,\r\n        cashier,\r\n        type: transactionType,\r\n        newbalance: accountBalance,\r\n      } = res4.rows[0];\r\n      return {\r\n        transactionId,\r\n        accountNumber,\r\n        amount,\r\n        cashier,\r\n        transactionType,\r\n        accountBalance,\r\n      };\r\n    } catch (err) {\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async getATransaction({ transactionId }) {\r\n    const sql = `\r\n        SELECT * FROM Transactions WHERE id='${transactionId}';\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) {\r\n        return { error: 'No transaction with this id' };\r\n      }\r\n      const {\r\n        createdon: createdOn,\r\n        type,\r\n        accountnumber: accountNumber,\r\n        amount,\r\n        oldbalance: oldBalance,\r\n        newbalance: newBalance,\r\n      } = res.rows[0];\r\n      return {\r\n        transactionId,\r\n        createdOn,\r\n        type,\r\n        accountNumber,\r\n        amount,\r\n        oldBalance,\r\n        newBalance,\r\n      };\r\n    } catch (err) {\r\n      return { error: err.detail };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n};\r\n\r\nexport default TransactionService;\r\n"],"file":"transaction.service.js"}