{"version":3,"sources":["../../src/services/transaction.service.js"],"names":["TransactionService","debitAccount","userId","accountNumber","amount","UserService","getAUser","user","type","isAdmin","error","transaction","Transaction","sql","pool","connect","client","query","res","rowCount","error1","account","rows","accountnumber","cashier","id","oldBalance","balance","error2","newBalance","sql2","sql3","sql4","res4","transactionId","transactionType","accountBalance","newbalance","release","creditAccount"],"mappings":"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","sourcesContent":["/* eslint-disable eqeqeq */\r\nimport Transaction from '../models/transaction.model';\r\nimport UserService from './user.service';\r\nimport pool from '../database/database';\r\n\r\nconst TransactionService = {\r\n  async debitAccount({ userId }, { accountNumber }, { amount }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type !== 'staff' || user.isAdmin == true) return { error: 'Unauthorized user' };\r\n    const transaction = new Transaction();\r\n    const sql = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${accountNumber};\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) return { error1: 'Account number does not match our records' };\r\n      const account = res.rows[0];\r\n      transaction.type = 'debit';\r\n      transaction.accountNumber = account.accountnumber;\r\n      transaction.cashier = user.id;\r\n      transaction.amount = amount;\r\n      transaction.oldBalance = account.balance;\r\n      if (account.balance - amount < 0) return { error2: 'Transaction declined: Insufficient funds' };\r\n      transaction.newBalance = account.balance - amount;\r\n      account.balance = transaction.newBalance;\r\n      const sql2 = `\r\n      INSERT INTO Transactions(\r\n        type,\r\n        accountNumber,\r\n        cashier,\r\n        amount,\r\n        oldBalance,\r\n        newBalance\r\n        ) \r\n        VALUES (\r\n          '${transaction.type}',\r\n          '${transaction.accountNumber}',\r\n          '${transaction.cashier}',\r\n          '${transaction.amount}',\r\n          '${transaction.oldBalance}',\r\n          '${transaction.newBalance}'\r\n          );\r\n    `;\r\n      await client.query(sql2);\r\n      // update account balance\r\n      const sql3 = `\r\n        UPDATE Accounts SET balance = '${transaction.newBalance}' WHERE accountNumber = ${accountNumber};\r\n      `;\r\n      await client.query(sql3);\r\n      const sql4 = `\r\n        SELECT * FROM Transactions ORDER BY id DESC LIMIT 1; \r\n      `;\r\n      const res4 = await client.query(sql4);\r\n      const {\r\n        id: transactionId,\r\n        cashier,\r\n        type: transactionType,\r\n        newbalance: accountBalance,\r\n      } = res4.rows[0];\r\n      return {\r\n        transactionId,\r\n        accountNumber,\r\n        amount,\r\n        cashier,\r\n        transactionType,\r\n        accountBalance,\r\n      };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n\r\n  async creditAccount({ userId }, { accountNumber }, { amount }) {\r\n    const user = await UserService.getAUser(userId);\r\n    if (user.type !== 'staff' || user.isAdmin == true) return { error: 'Unauthorized user' };\r\n    const transaction = new Transaction();\r\n    const sql = `\r\n        SELECT * FROM Accounts WHERE accountNumber=${accountNumber};\r\n      `;\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      const res = await client.query(sql);\r\n      if (res.rowCount < 1) return { error1: 'Account number does not match our records' };\r\n      const account = res.rows[0];\r\n      transaction.type = 'credit';\r\n      transaction.accountNumber = account.accountnumber;\r\n      transaction.cashier = user.id;\r\n      transaction.amount = amount;\r\n      transaction.oldBalance = account.balance;\r\n      transaction.newBalance = account.balance + amount;\r\n      account.balance = transaction.newBalance;\r\n      const sql2 = `\r\n      INSERT INTO Transactions(\r\n        type,\r\n        accountNumber,\r\n        cashier,\r\n        amount,\r\n        oldBalance,\r\n        newBalance\r\n        ) \r\n        VALUES (\r\n          '${transaction.type}',\r\n          '${transaction.accountNumber}',\r\n          '${transaction.cashier}',\r\n          '${transaction.amount}',\r\n          '${transaction.oldBalance}',\r\n          '${transaction.newBalance}'\r\n          );\r\n    `;\r\n      await client.query(sql2);\r\n      // update account balance\r\n      const sql3 = `\r\n        UPDATE Accounts SET balance = '${transaction.newBalance}' WHERE accountNumber = ${accountNumber};\r\n      `;\r\n      await client.query(sql3);\r\n      const sql4 = `\r\n        SELECT * FROM Transactions ORDER BY id DESC LIMIT 1; \r\n      `;\r\n      const res4 = await client.query(sql4);\r\n      const {\r\n        id: transactionId,\r\n        cashier,\r\n        type: transactionType,\r\n        newbalance: accountBalance,\r\n      } = res4.rows[0];\r\n      return {\r\n        transactionId,\r\n        accountNumber,\r\n        amount,\r\n        cashier,\r\n        transactionType,\r\n        accountBalance,\r\n      };\r\n    } finally {\r\n      client.release();\r\n    }\r\n  },\r\n};\r\n\r\nexport default TransactionService;\r\n"],"file":"transaction.service.js"}