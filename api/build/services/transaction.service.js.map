{"version":3,"sources":["../../src/services/transaction.service.js"],"names":["TransactionService","debitAccount","userId","accountNumber","amount","user","UserService","getAUser","type","isAdmin","error","account","AccountService","getAnAccount","id","error1","transaction","Transaction","transactionResponse","transactionLength","dummyData","transactions","length","lastId","newId","createdOn","Date","cashier","oldBalance","balance","error2","newBalance","push","transactionId","transactionType","accountBalance","creditAccount"],"mappings":"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","sourcesContent":["/* eslint-disable eqeqeq */\r\nimport dummyData from '../utils/dummyData';\r\nimport Transaction from '../models/transaction.model';\r\nimport UserService from './user.service';\r\nimport AccountService from './account.service';\r\n\r\nconst TransactionService = {\r\n  debitAccount({ userId }, { accountNumber }, { amount }) {\r\n    const user = UserService.getAUser(userId);\r\n    if (user.type !== 'staff' || user.isAdmin == true) return { error: 'Unauthorized user' };\r\n    const account = AccountService.getAnAccount(accountNumber);\r\n    if (!account.id) return { error1: 'Account number does not match our records' };\r\n    const transaction = new Transaction();\r\n    const transactionResponse = {};\r\n    const transactionLength = dummyData.transactions.length;\r\n    const lastId = dummyData.transactions[transactionLength - 1].id;\r\n    const newId = lastId + 1;\r\n    transaction.id = newId;\r\n    transaction.createdOn = new Date();\r\n    transaction.type = 'debit';\r\n    transaction.accountNumber = account.accountNumber;\r\n    transaction.cashier = user.id;\r\n    transaction.amount = amount;\r\n    transaction.oldBalance = account.balance;\r\n    if (account.balance - amount < 0) return { error2: 'Transaction declined: Insufficient funds' };\r\n    transaction.newBalance = account.balance - amount;\r\n    account.balance = transaction.newBalance;\r\n    dummyData.transactions.push(transaction);\r\n    transactionResponse.transactionId = transaction.id;\r\n    transactionResponse.accountNumber = transaction.accountNumber;\r\n    transactionResponse.amount = transaction.amount;\r\n    transactionResponse.cashier = transaction.cashier;\r\n    transactionResponse.transactionType = transaction.type;\r\n    transactionResponse.accountBalance = `${transaction.newBalance}`;\r\n    return transactionResponse;\r\n  },\r\n\r\n  creditAccount({ userId }, { accountNumber }, { amount }) {\r\n    const user = UserService.getAUser(userId);\r\n    if (user.type !== 'staff' || user.isAdmin == true) return { error: 'Unauthorized user' };\r\n    const account = AccountService.getAnAccount(accountNumber);\r\n    if (!account.id) return { error1: 'Account number does not match our records' };\r\n    const transaction = new Transaction();\r\n    const transactionResponse = {};\r\n    const transactionLength = dummyData.transactions.length;\r\n    const lastId = dummyData.transactions[transactionLength - 1].id;\r\n    const newId = lastId + 1;\r\n    transaction.id = newId;\r\n    transaction.createdOn = new Date();\r\n    transaction.type = 'credit';\r\n    transaction.accountNumber = account.accountNumber;\r\n    transaction.cashier = user.id;\r\n    transaction.amount = amount;\r\n    transaction.oldBalance = account.balance;\r\n    transaction.newBalance = account.balance + amount;\r\n    account.balance = transaction.newBalance;\r\n    dummyData.transactions.push(transaction);\r\n    transactionResponse.transactionId = transaction.id;\r\n    transactionResponse.accountNumber = transaction.accountNumber;\r\n    transactionResponse.amount = transaction.amount;\r\n    transactionResponse.cashier = transaction.cashier;\r\n    transactionResponse.transactionType = transaction.type;\r\n    transactionResponse.accountBalance = `${transaction.newBalance}`;\r\n    return transactionResponse;\r\n  },\r\n};\r\n\r\nexport default TransactionService;\r\n"],"file":"transaction.service.js"}