{"version":3,"sources":["../../src/helpers/route.helper.js"],"names":["routeHelper","validateBody","schema","req","res","next","result","Joi","validate","body","error","json","status","details","message","value","validateParams","params","schemas","authSchema","object","keys","email","string","required","firstName","lastName","password","type","isAdmin","authLoginSchema","createAccountSchema","valid","accountStatusSchema","debitCreditSchema","amount","number","positive","idSchema","transactionId","integer","accNoSchema","accountNumber"],"mappings":"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","sourcesContent":["import Joi from 'joi';\r\n\r\nconst routeHelper = {\r\n  validateBody: schema => (req, res, next) => {\r\n    const result = Joi.validate(req.body, schema);\r\n    if (result.error) {\r\n      return res.json({\r\n        status: 400,\r\n        error: result.error.details[0].message,\r\n      }).status(400);\r\n    }\r\n\r\n    req.body = result.value;\r\n    return next();\r\n  },\r\n\r\n  validateParams: schema => (req, res, next) => {\r\n    const result = Joi.validate(req.params, schema);\r\n    if (result.error) {\r\n      return res.json({\r\n        status: 400,\r\n        error: result.error.details[0].message,\r\n      }).status(400);\r\n    }\r\n\r\n    req.params = result.value;\r\n    return next();\r\n  },\r\n\r\n  schemas: {\r\n    authSchema: Joi.object().keys({\r\n      email: Joi.string().email().required()\r\n        .error(() => ({\r\n          message: 'A valid email address is required',\r\n        })),\r\n      firstName: Joi.string().required()\r\n        .error(() => ({\r\n          message: 'First Name is required',\r\n        })),\r\n      lastName: Joi.string().required()\r\n        .error(() => ({\r\n          message: 'Last Name is required',\r\n        })),\r\n      password: Joi.string().required()\r\n        .error(() => ({\r\n          message: 'Password is required',\r\n        })),\r\n      type: Joi.string(),\r\n      isAdmin: Joi.boolean(),\r\n    }),\r\n    authLoginSchema: Joi.object().keys({\r\n      email: Joi.string().email().required()\r\n        .error(() => ({\r\n          message: 'A valid email address is required',\r\n        })),\r\n      password: Joi.string().required()\r\n        .error(() => ({\r\n          message: 'Password is required',\r\n        })),\r\n    }),\r\n    createAccountSchema: Joi.object().keys({\r\n      type: Joi.string().required()\r\n        .valid(['savings', 'current'])\r\n        .error(() => ({\r\n          message: 'Account type must be savings or current and is required',\r\n        })),\r\n    }),\r\n    accountStatusSchema: Joi.object().keys({\r\n      status: Joi.string().required()\r\n        .valid(['active', 'dormant'])\r\n        .error(() => ({\r\n          message: 'Status must be active or dormant and is required',\r\n        })),\r\n    }),\r\n    debitCreditSchema: Joi.object().keys({\r\n      amount: Joi.number().positive().required()\r\n        .error(() => ({\r\n          message: 'Amount must be a positive number and is required',\r\n        })),\r\n    }),\r\n    idSchema: Joi.object().keys({\r\n      transactionId: Joi.number().integer().required()\r\n        .error(() => ({\r\n          message: 'Transaction ID must be an integer',\r\n        })),\r\n    }),\r\n    accNoSchema: Joi.object().keys({\r\n      accountNumber: Joi.number().integer().required()\r\n        .error(() => ({\r\n          message: 'Account number must be an integer',\r\n        })),\r\n    }),\r\n  },\r\n};\r\n\r\nexport default routeHelper;\r\n"],"file":"route.helper.js"}