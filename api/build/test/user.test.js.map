{"version":3,"sources":["../../src/test/user.test.js"],"names":["should","chai","use","chaiHttp","client","email","password","getClientToken","UserService","signIn","clientSignIn","clientToken","token","describe","signUpUrl","it","done","user","firstName","lastName","request","app","post","send","end","err","res","body","have","status","be","a","data","property","type","isAdmin","error","equal","signInUrl","userUrl","get","set"],"mappings":"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","sourcesContent":["import chaiHttp from 'chai-http';\r\nimport chai from 'chai';\r\nimport app from '../index';\r\nimport UserService from '../services/user.service';\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst should = chai.should();\r\nchai.use(chaiHttp);\r\n\r\nconst client = {\r\n  email: 'neropaulej@gmail.com',\r\n  password: 'password',\r\n};\r\n\r\nconst getClientToken = async () => {\r\n  const clientSignIn = await UserService.signIn(client);\r\n  const clientToken = clientSignIn.token;\r\n  return clientToken;\r\n};\r\n\r\n// Test user sign up\r\ndescribe('Testing user signup', () => {\r\n  const signUpUrl = '/api/v1/auth/signup';\r\n  it('should register new user when all required fields are given', (done) => {\r\n    const user = {\r\n      firstName: 'Oghenero',\r\n      lastName: 'Paul-Ejukorlem',\r\n      email: 'paulej@gmail.com',\r\n      password: 'password',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('id');\r\n        res.body.data.should.have.property('email');\r\n        res.body.data.should.have.property('firstName');\r\n        res.body.data.should.have.property('lastName');\r\n        res.body.data.should.have.property('type');\r\n        res.body.data.should.have.property('isAdmin');\r\n        res.body.data.should.have.property('token');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should register new user when all fields are given', (done) => {\r\n    const user = {\r\n      firstName: 'Oghenero',\r\n      lastName: 'Paul-Ejukorlem',\r\n      email: 'paule@gmail.com',\r\n      password: 'password',\r\n      type: 'staff',\r\n      isAdmin: 'true',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('id');\r\n        res.body.data.should.have.property('email');\r\n        res.body.data.should.have.property('firstName');\r\n        res.body.data.should.have.property('lastName');\r\n        res.body.data.should.have.property('type');\r\n        res.body.data.should.have.property('isAdmin');\r\n        res.body.data.should.have.property('token');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should not register new user when first name field is missing', (done) => {\r\n    const user = {\r\n      lastName: 'Paul-Ejukorlem',\r\n      email: 'neropaulej@gmail.com',\r\n      password: 'password',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(400);\r\n        res.body.should.be.a('object');\r\n        res.body.error.should.equal('First Name is required');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should not register new user when last name field is missing', (done) => {\r\n    const user = {\r\n      firstName: 'Oghenero',\r\n      email: 'neropaulej@gmail.com',\r\n      password: 'password',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(400);\r\n        res.body.should.be.a('object');\r\n        res.body.should.be.a('object');\r\n        res.body.error.should.equal('Last Name is required');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should not register new user when email field is missing', (done) => {\r\n    const user = {\r\n      firstName: 'Oghenero',\r\n      lastName: 'Paul-Ejukorlem',\r\n      password: 'password',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(400);\r\n        res.body.should.be.a('object');\r\n        res.body.should.be.a('object');\r\n        res.body.error.should.equal('A valid email address is required');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should not register new user when password field is missing', (done) => {\r\n    const user = {\r\n      firstName: 'Oghenero',\r\n      lastName: 'Paul-Ejukorlem',\r\n      email: 'neropaulej@gmail.com',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(400);\r\n        res.body.should.be.a('object');\r\n        res.body.should.be.a('object');\r\n        res.body.error.should.equal('Password is required');\r\n        done();\r\n      });\r\n  });\r\n});\r\n\r\n// Test for user sign in\r\ndescribe('Testing user signin', () => {\r\n  const signInUrl = '/api/v1/auth/signin';\r\n  it('should sign in a user when all required fields are given', (done) => {\r\n    const user = {\r\n      email: 'paulej@gmail.com',\r\n      password: 'password',\r\n    };\r\n    chai.request(app)\r\n      .post(signInUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('id');\r\n        res.body.data.should.have.property('email');\r\n        res.body.data.should.have.property('firstName');\r\n        res.body.data.should.have.property('lastName');\r\n        res.body.data.should.have.property('type');\r\n        res.body.data.should.have.property('isAdmin');\r\n        res.body.data.should.have.property('token');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should not sign in user when email field is missing', (done) => {\r\n    const user = {\r\n      password: 'password',\r\n    };\r\n    chai.request(app)\r\n      .post(signInUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(400);\r\n        res.body.should.be.a('object');\r\n        res.body.should.be.a('object');\r\n        res.body.error.should.equal('A valid email address is required');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should not sign in user when password field is missing', (done) => {\r\n    const user = {\r\n      email: 'nerocodes@email.com',\r\n    };\r\n    chai.request(app)\r\n      .post(signInUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(400);\r\n        res.body.should.be.a('object');\r\n        res.body.should.be.a('object');\r\n        res.body.error.should.equal('Password is required');\r\n        done();\r\n      });\r\n  });\r\n});\r\n\r\n// Test for getting user accounts\r\ndescribe('Testing get user accounts', () => {\r\n  let userUrl = '/api/v1/user/neropaulej@gmail.com/accounts';\r\n\r\n  it('should get all accounts belonging to user', async () => {\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .get(userUrl)\r\n      .set('x-access-token', token)\r\n      .end((err, res) => {\r\n        res.body.should.have.status(200);\r\n        res.body.data.should.be.a('array');\r\n        res.body.data[0].should.be.a('object');\r\n        res.body.data[0].should.have.property('createdOn');\r\n        res.body.data[0].should.have.property('accountNumber');\r\n        res.body.data[0].should.have.property('type');\r\n        res.body.data[0].should.have.property('status');\r\n        res.body.data[0].should.have.property('balance');\r\n      });\r\n  });\r\n\r\n  it('should not get all accounts if email does not exist', async () => {\r\n    userUrl = '/api/v1/user/neropaule@gmail.com/accounts';\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .get(userUrl)\r\n      .set('x-access-token', token)\r\n      .end((err, res) => {\r\n        res.body.should.have.status(400);\r\n        res.body.should.be.a('object');\r\n        res.body.error.should.equal('No user with this email');\r\n      });\r\n  });\r\n\r\n  it('should not get all accounts if user does not have accounts', async () => {\r\n    userUrl = '/api/v1/user/yoshiyama@gmail.com/accounts';\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .get(userUrl)\r\n      .set('x-access-token', token)\r\n      .end((err, res) => {\r\n        res.body.should.have.status(400);\r\n        res.body.data.should.be.a('object');\r\n        res.body.error.should.equal('User does not have any account');\r\n      });\r\n  });\r\n});\r\n"],"file":"user.test.js"}