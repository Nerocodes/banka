{"version":3,"sources":["../../src/test/account.test.js"],"names":["should","chai","use","chaiHttp","describe","createAccUrl","signUpUrl","signInUrl","it","done","user","firstName","lastName","email","password","accType","type","request","app","post","send","end","err","res","body","have","status","be","a","data","property","token","set","error","response","isAdmin","equal","accStatusUrl","accountNumber","staff","accStatus","errStaff","resStaff","tokenStaff","patch","errorStaff","responseStaff","delAccUrl","message","fetchAccUrl","get"],"mappings":"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","sourcesContent":["import chaiHttp from 'chai-http';\r\nimport chai from 'chai';\r\nimport app from '../index';\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst should = chai.should();\r\nchai.use(chaiHttp);\r\n\r\n// Test user create account\r\ndescribe('Testing user creating an account', () => {\r\n  const createAccUrl = '/api/v1/accounts';\r\n  const signUpUrl = '/api/v1/auth/signup';\r\n  const signInUrl = '/api/v1/auth/signin';\r\n  it('should create an account for user if all parameters are given', (done) => {\r\n    const user = {\r\n      firstName: 'Oghenero',\r\n      lastName: 'Paul-Ejukorlem',\r\n      email: 'neropaulej@gmail.com',\r\n      password: 'password',\r\n    };\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('token');\r\n        const { token } = res.body.data;\r\n        chai.request(app)\r\n          .post(createAccUrl)\r\n          .set('x-access-token', token)\r\n          .send(accType)\r\n          .end((error, response) => {\r\n            response.body.should.have.status(201);\r\n            response.body.should.be.a('object');\r\n            response.body.data.should.have.property('accountNumber');\r\n            response.body.data.should.have.property('firstName');\r\n            response.body.data.should.have.property('lastName');\r\n            response.body.data.should.have.property('email');\r\n            response.body.data.should.have.property('type');\r\n            response.body.data.should.have.property('openingBalance');\r\n            done();\r\n          });\r\n      });\r\n  });\r\n\r\n  it('should not create an account if user is not a client', (done) => {\r\n    const user = {\r\n      firstName: 'Nero',\r\n      lastName: 'Codes',\r\n      email: 'nerocodes@gmail.com',\r\n      password: 'password',\r\n      type: 'staff',\r\n      isAdmin: 'false',\r\n    };\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('token');\r\n        const { token } = res.body.data;\r\n        chai.request(app)\r\n          .post(createAccUrl)\r\n          .set('x-access-token', token)\r\n          .send(accType)\r\n          .end((error, response) => {\r\n            response.body.should.have.status(401);\r\n            response.body.should.be.a('object');\r\n            response.body.error.should.equal('An account cannot be created for this user');\r\n            done();\r\n          });\r\n      });\r\n  });\r\n\r\n  it('should not create account if user already has account', (done) => {\r\n    const user = {\r\n      email: 'neropaulej@gmail.com',\r\n      password: 'password',\r\n    };\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    chai.request(app)\r\n      .post(signInUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('token');\r\n        const { token } = res.body.data;\r\n        chai.request(app)\r\n          .post(createAccUrl)\r\n          .set('x-access-token', token)\r\n          .send(accType)\r\n          .end((error, response) => {\r\n            response.body.should.have.status(400);\r\n            response.body.should.be.a('object');\r\n            response.body.error.should.equal('User already has an account');\r\n            done();\r\n          });\r\n      });\r\n  });\r\n});\r\n\r\n// Test Admin/Staff activate or deactivate account\r\ndescribe('Testing admin or staff activating and deactivating account', () => {\r\n  const createAccUrl = '/api/v1/accounts';\r\n  const accStatusUrl = '/api/v1/accounts/';\r\n  const signUpUrl = '/api/v1/auth/signup';\r\n  const signInUrl = '/api/v1/auth/signin';\r\n  it('should change account status if all parameters are provided', (done) => {\r\n    const user = {\r\n      firstName: 'Yoshi',\r\n      lastName: 'Yama',\r\n      email: 'yoshiyama@gmail.com',\r\n      password: 'password',\r\n    };\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('token');\r\n        const { token } = res.body.data;\r\n        chai.request(app)\r\n          .post(createAccUrl)\r\n          .set('x-access-token', token)\r\n          .send(accType)\r\n          .end((error, response) => {\r\n            response.body.should.have.status(201);\r\n            response.body.should.be.a('object');\r\n            response.body.data.should.have.property('accountNumber');\r\n            const { accountNumber } = response.body.data;\r\n            const staff = {\r\n              email: 'nerocodes@gmail.com',\r\n              password: 'password',\r\n            };\r\n            const accStatus = {\r\n              status: 'active',\r\n            };\r\n            chai.request(app)\r\n              .post(signInUrl)\r\n              .send(staff)\r\n              .end((errStaff, resStaff) => {\r\n                // console.log(res.body);\r\n                resStaff.body.should.have.status(201);\r\n                resStaff.body.should.be.a('object');\r\n                resStaff.body.data.should.have.property('token');\r\n                const tokenStaff = resStaff.body.data.token;\r\n                chai.request(app)\r\n                  .patch(`${accStatusUrl}${accountNumber}`)\r\n                  .set('x-access-token', tokenStaff)\r\n                  .send(accStatus)\r\n                  .end((errorStaff, responseStaff) => {\r\n                    responseStaff.body.should.have.status(200);\r\n                    responseStaff.body.should.be.a('object');\r\n                    responseStaff.body.data.should.have.property('accountNumber');\r\n                    responseStaff.body.data.should.have.property('status');\r\n                    done();\r\n                  });\r\n              });\r\n          });\r\n      });\r\n  });\r\n\r\n  it('should not change account status if user is not staff', (done) => {\r\n    const user = {\r\n      firstName: 'Yoshi',\r\n      lastName: 'Yama',\r\n      email: 'yoshiyama@gmail.com',\r\n      password: 'password',\r\n    };\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('token');\r\n        const { token } = res.body.data;\r\n        chai.request(app)\r\n          .post(createAccUrl)\r\n          .set('x-access-token', token)\r\n          .send(accType)\r\n          .end((error, response) => {\r\n            response.body.should.have.status(201);\r\n            response.body.should.be.a('object');\r\n            response.body.data.should.have.property('accountNumber');\r\n            const { accountNumber } = response.body.data;\r\n            const staff = {\r\n              email: 'yoshiyama@gmail.com',\r\n              password: 'password',\r\n            };\r\n            const accStatus = {\r\n              status: 'active',\r\n            };\r\n            chai.request(app)\r\n              .post(signInUrl)\r\n              .send(staff)\r\n              .end((errStaff, resStaff) => {\r\n                // console.log(res.body);\r\n                resStaff.body.should.have.status(201);\r\n                resStaff.body.should.be.a('object');\r\n                resStaff.body.data.should.have.property('token');\r\n                const tokenStaff = resStaff.body.data.token;\r\n                chai.request(app)\r\n                  .patch(`${accStatusUrl}${accountNumber}`)\r\n                  .set('x-access-token', tokenStaff)\r\n                  .send(accStatus)\r\n                  .end((errorStaff, responseStaff) => {\r\n                    responseStaff.body.should.have.status(401);\r\n                    responseStaff.body.should.be.a('object');\r\n                    responseStaff.body.error.should.equal('Unauthorized user');\r\n                    done();\r\n                  });\r\n              });\r\n          });\r\n      });\r\n  });\r\n\r\n  it('should not change account status if account is not found', (done) => {\r\n    const staff = {\r\n      email: 'nerocodes@gmail.com',\r\n      password: 'password',\r\n    };\r\n    const accStatus = {\r\n      status: 'active',\r\n    };\r\n    chai.request(app)\r\n      .post(signInUrl)\r\n      .send(staff)\r\n      .end((errStaff, resStaff) => {\r\n        // console.log(res.body);\r\n        resStaff.body.should.have.status(201);\r\n        resStaff.body.should.be.a('object');\r\n        resStaff.body.data.should.have.property('token');\r\n        const tokenStaff = resStaff.body.data.token;\r\n        chai.request(app)\r\n          .patch(`${accStatusUrl}123456`)\r\n          .set('x-access-token', tokenStaff)\r\n          .send(accStatus)\r\n          .end((errorStaff, responseStaff) => {\r\n            responseStaff.body.should.have.status(404);\r\n            responseStaff.body.should.be.a('object');\r\n            responseStaff.body.error.should.equal('No account found');\r\n            done();\r\n          });\r\n      });\r\n  });\r\n});\r\n\r\n// Test for Admin/Staff delete account\r\ndescribe('Testing admin or staff deleting account', () => {\r\n  const createAccUrl = '/api/v1/accounts';\r\n  const delAccUrl = '/api/v1/accounts/';\r\n  const signUpUrl = '/api/v1/auth/signup';\r\n  const signInUrl = '/api/v1/auth/signin';\r\n  it('should delete account if all parameters are given', (done) => {\r\n    const user = {\r\n      firstName: 'Yoshi',\r\n      lastName: 'Yama',\r\n      email: 'yoshiyama@gmail.com',\r\n      password: 'password',\r\n    };\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('token');\r\n        const { token } = res.body.data;\r\n        chai.request(app)\r\n          .post(createAccUrl)\r\n          .set('x-access-token', token)\r\n          .send(accType)\r\n          .end((error, response) => {\r\n            response.body.should.have.status(201);\r\n            response.body.should.be.a('object');\r\n            response.body.data.should.have.property('accountNumber');\r\n            const { accountNumber } = response.body.data;\r\n            const staff = {\r\n              email: 'nerocodes@gmail.com',\r\n              password: 'password',\r\n            };\r\n            chai.request(app)\r\n              .post(signInUrl)\r\n              .send(staff)\r\n              .end((errStaff, resStaff) => {\r\n                // console.log(res.body);\r\n                resStaff.body.should.have.status(201);\r\n                resStaff.body.should.be.a('object');\r\n                resStaff.body.data.should.have.property('token');\r\n                const tokenStaff = resStaff.body.data.token;\r\n                chai.request(app)\r\n                  .delete(`${delAccUrl}${accountNumber}`)\r\n                  .set('x-access-token', tokenStaff)\r\n                  .end((errorStaff, responseStaff) => {\r\n                    responseStaff.body.should.have.status(200);\r\n                    responseStaff.body.should.be.a('object');\r\n                    responseStaff.body.message.should.equal('Account successfully deleted');\r\n                    done();\r\n                  });\r\n              });\r\n          });\r\n      });\r\n  });\r\n\r\n  it('should not delete account if user is not staff', (done) => {\r\n    const user = {\r\n      firstName: 'Yoshi',\r\n      lastName: 'Yama',\r\n      email: 'yoshiyama@gmail.com',\r\n      password: 'password',\r\n    };\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    chai.request(app)\r\n      .post(signUpUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        // console.log(res.body);\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('token');\r\n        const { token } = res.body.data;\r\n        chai.request(app)\r\n          .post(createAccUrl)\r\n          .set('x-access-token', token)\r\n          .send(accType)\r\n          .end((error, response) => {\r\n            response.body.should.have.status(201);\r\n            response.body.should.be.a('object');\r\n            response.body.data.should.have.property('accountNumber');\r\n            const { accountNumber } = response.body.data;\r\n            const staff = {\r\n              email: 'yoshiyama@gmail.com',\r\n              password: 'password',\r\n            };\r\n            chai.request(app)\r\n              .post(signInUrl)\r\n              .send(staff)\r\n              .end((errStaff, resStaff) => {\r\n                // console.log(res.body);\r\n                resStaff.body.should.have.status(201);\r\n                resStaff.body.should.be.a('object');\r\n                resStaff.body.data.should.have.property('token');\r\n                const tokenStaff = resStaff.body.data.token;\r\n                chai.request(app)\r\n                  .delete(`${delAccUrl}${accountNumber}`)\r\n                  .set('x-access-token', tokenStaff)\r\n                  .end((errorStaff, responseStaff) => {\r\n                    responseStaff.body.should.have.status(401);\r\n                    responseStaff.body.should.be.a('object');\r\n                    responseStaff.body.error.should.equal('Unauthorized user');\r\n                    done();\r\n                  });\r\n              });\r\n          });\r\n      });\r\n  });\r\n\r\n  it('should not delete account if account does not exist', (done) => {\r\n    const staff = {\r\n      email: 'nerocodes@gmail.com',\r\n      password: 'password',\r\n    };\r\n    const accStatus = {\r\n      status: 'active',\r\n    };\r\n    chai.request(app)\r\n      .post(signInUrl)\r\n      .send(staff)\r\n      .end((errStaff, resStaff) => {\r\n        // console.log(res.body);\r\n        resStaff.body.should.have.status(201);\r\n        resStaff.body.should.be.a('object');\r\n        resStaff.body.data.should.have.property('token');\r\n        const tokenStaff = resStaff.body.data.token;\r\n        chai.request(app)\r\n          .patch(`${delAccUrl}123456`)\r\n          .set('x-access-token', tokenStaff)\r\n          .send(accStatus)\r\n          .end((errorStaff, responseStaff) => {\r\n            responseStaff.body.should.have.status(404);\r\n            responseStaff.body.should.be.a('object');\r\n            responseStaff.body.error.should.equal('No account found');\r\n            done();\r\n          });\r\n      });\r\n  });\r\n});\r\n\r\n// Test for getting all bank accounts\r\ndescribe('Testing fetch all bank accounts', () => {\r\n  const signInUrl = '/api/v1/auth/signin';\r\n  const fetchAccUrl = '/api/v1/accounts';\r\n  it('should fetch all bank accounts', (done) => {\r\n    const user = {\r\n      email: 'nerocodes@gmail.com',\r\n      password: 'password',\r\n    };\r\n    chai.request(app)\r\n      .post(signInUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('token');\r\n        const { token } = res.body.data;\r\n        chai.request(app)\r\n          .get(fetchAccUrl)\r\n          .set('x-access-token', token)\r\n          .end((error, response) => {\r\n            response.body.should.have.status(200);\r\n            response.body.should.be.a('object');\r\n            response.body.should.have.property('data');\r\n            done();\r\n          });\r\n      });\r\n  });\r\n\r\n  it('should not fetch accounts if user is not staff', (done) => {\r\n    const user = {\r\n      email: 'yoshiyama@gmail.com',\r\n      password: 'password',\r\n    };\r\n    chai.request(app)\r\n      .post(signInUrl)\r\n      .send(user)\r\n      .end((err, res) => {\r\n        res.body.should.have.status(201);\r\n        res.body.should.be.a('object');\r\n        res.body.data.should.have.property('token');\r\n        const { token } = res.body.data;\r\n        chai.request(app)\r\n          .get(fetchAccUrl)\r\n          .set('x-access-token', token)\r\n          .end((error, response) => {\r\n            response.body.should.have.status(401);\r\n            response.body.should.be.a('object');\r\n            response.body.error.should.equal('Unauthorized user');\r\n            done();\r\n          });\r\n      });\r\n  });\r\n});\r\n"],"file":"account.test.js"}