{"version":3,"sources":["../../src/test/account.test.js"],"names":["should","chai","use","chaiHttp","client","email","password","staff","getClientToken","UserService","signIn","clientSignIn","clientToken","token","getStaffToken","staffSignIn","staffToken","accountNumber","describe","createAccUrl","it","accType","type","request","app","post","set","send","end","error","response","body","have","status","be","a","data","property","equal","accStatusUrl","accStatus","tokenStaff","patch","errorStaff","responseStaff","delAccUrl","message"],"mappings":"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","sourcesContent":["import chaiHttp from 'chai-http';\r\nimport chai from 'chai';\r\nimport app from '../index';\r\nimport UserService from '../services/user.service';\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst should = chai.should();\r\nchai.use(chaiHttp);\r\n\r\n// Set token variables\r\nconst client = {\r\n  email: 'neropaulej@gmail.com',\r\n  password: 'password',\r\n};\r\n\r\nconst staff = {\r\n  email: 'yetundegeorge@gmail.com',\r\n  password: 'password',\r\n};\r\n\r\n// const admin = {\r\n//   email: 'yoshiyama@gmail.com',\r\n//   password: 'password',\r\n// };\r\n\r\nconst getClientToken = async () => {\r\n  const clientSignIn = await UserService.signIn(client);\r\n  const clientToken = clientSignIn.token;\r\n  return clientToken;\r\n};\r\n\r\nconst getStaffToken = async () => {\r\n  const staffSignIn = await UserService.signIn(staff);\r\n  const staffToken = staffSignIn.token;\r\n  return staffToken;\r\n};\r\n\r\n// const getAdminToken = async () => {\r\n//   const adminSignIn = await UserService.signIn(admin);\r\n//   const adminToken = adminSignIn.token;\r\n//   return adminToken;\r\n// };\r\n\r\nconst accountNumber = 23402001;\r\n\r\n// Test user create account\r\ndescribe('Testing user creating an account', () => {\r\n  const createAccUrl = '/api/v1/accounts';\r\n  it('should create an account for user if all parameters are given', async () => {\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .post(createAccUrl)\r\n      .set('x-access-token', token)\r\n      .send(accType)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(201);\r\n        response.body.should.be.a('object');\r\n        response.body.data.should.have.property('accountNumber');\r\n        response.body.data.should.have.property('firstName');\r\n        response.body.data.should.have.property('lastName');\r\n        response.body.data.should.have.property('email');\r\n        response.body.data.should.have.property('type');\r\n        response.body.data.should.have.property('openingBalance');\r\n      });\r\n  });\r\n\r\n  it('should not create an account if user is not a client', async () => {\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .post(createAccUrl)\r\n      .set('x-access-token', token)\r\n      .send(accType)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(401);\r\n        response.body.should.be.a('object');\r\n        response.body.error.should.equal('An account cannot be created for this user');\r\n      });\r\n  });\r\n});\r\n\r\n// Test Admin/Staff activate or deactivate account\r\ndescribe('Testing admin or staff activating and deactivating account', () => {\r\n  const accStatusUrl = '/api/v1/accounts/';\r\n  it('should change account status if all parameters are provided', async () => {\r\n    const accStatus = {\r\n      status: 'active',\r\n    };\r\n    const tokenStaff = await getStaffToken();\r\n    chai.request(app)\r\n      .patch(`${accStatusUrl}${accountNumber}`)\r\n      .set('x-access-token', tokenStaff)\r\n      .send(accStatus)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(200);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.data.should.have.property('accountNumber');\r\n        responseStaff.body.data.should.have.property('status');\r\n      });\r\n  });\r\n\r\n  it('should not change account status if user is not staff', async () => {\r\n    const accStatus = {\r\n      status: 'active',\r\n    };\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .patch(`${accStatusUrl}${accountNumber}`)\r\n      .set('x-access-token', token)\r\n      .send(accStatus)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(401);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('Unauthorized user');\r\n      });\r\n  });\r\n\r\n  it('should not change account status if account is not found', async () => {\r\n    const accStatus = {\r\n      status: 'active',\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .patch(`${accStatusUrl}123456`)\r\n      .set('x-access-token', token)\r\n      .send(accStatus)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(404);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('No account found');\r\n      });\r\n  });\r\n});\r\n\r\n// Test for Admin/Staff delete account\r\ndescribe('Testing admin or staff deleting account', () => {\r\n  const delAccUrl = '/api/v1/accounts/';\r\n  it('should delete account if all parameters are given', async () => {\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .delete(`${delAccUrl}${accountNumber + 1}`)\r\n      .set('x-access-token', token)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(200);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.message.should.equal('Account successfully deleted');\r\n      });\r\n  });\r\n\r\n  it('should not delete account if user is not staff', async () => {\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .delete(`${delAccUrl}${accountNumber + 2}`)\r\n      .set('x-access-token', token)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(403);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('Unauthorized user');\r\n      });\r\n  });\r\n\r\n  it('should not delete account if account does not exist', async () => {\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .delete(`${delAccUrl}123456`)\r\n      .set('x-access-token', token)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(400);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('No account found');\r\n      });\r\n  });\r\n});\r\n\r\n// Test for getting all bank accounts\r\n// describe('Testing fetch all bank accounts', () => {\r\n//   const signInUrl = '/api/v1/auth/signin';\r\n//   const fetchAccUrl = '/api/v1/accounts';\r\n//   it('should fetch all bank accounts', (done) => {\r\n//     const user = {\r\n//       email: 'nerocodes@gmail.com',\r\n//       password: 'password',\r\n//     };\r\n//     chai.request(app)\r\n//       .post(signInUrl)\r\n//       .send(user)\r\n//       .end((err, res) => {\r\n//         res.body.should.have.status(201);\r\n//         res.body.should.be.a('object');\r\n//         res.body.data.should.have.property('token');\r\n//         const { token } = res.body.data;\r\n//         chai.request(app)\r\n//           .get(fetchAccUrl)\r\n//           .set('x-access-token', token)\r\n//           .end((error, response) => {\r\n//             response.body.should.have.status(200);\r\n//             response.body.should.be.a('object');\r\n//             response.body.should.have.property('data');\r\n//             done();\r\n//           });\r\n//       });\r\n//   });\r\n\r\n//   it('should not fetch accounts if user is not staff', (done) => {\r\n//     const user = {\r\n//       email: 'yoshiyama@gmail.com',\r\n//       password: 'password',\r\n//     };\r\n//     chai.request(app)\r\n//       .post(signInUrl)\r\n//       .send(user)\r\n//       .end((err, res) => {\r\n//         res.body.should.have.status(201);\r\n//         res.body.should.be.a('object');\r\n//         res.body.data.should.have.property('token');\r\n//         const { token } = res.body.data;\r\n//         chai.request(app)\r\n//           .get(fetchAccUrl)\r\n//           .set('x-access-token', token)\r\n//           .end((error, response) => {\r\n//             response.body.should.have.status(401);\r\n//             response.body.should.be.a('object');\r\n//             response.body.error.should.equal('Unauthorized user');\r\n//             done();\r\n//           });\r\n//       });\r\n//   });\r\n// });\r\n"],"file":"account.test.js"}