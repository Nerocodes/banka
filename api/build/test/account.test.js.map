{"version":3,"sources":["../../src/test/account.test.js"],"names":["should","chai","use","chaiHttp","client","email","password","staff","admin","getClientToken","UserService","signIn","clientSignIn","clientToken","token","getStaffToken","staffSignIn","staffToken","getAdminToken","adminSignIn","adminToken","accountNumber","describe","createAccUrl","it","accType","type","request","app","post","set","send","end","error","response","body","have","status","be","a","data","property","equal","accStatusUrl","accStatus","tokenStaff","patch","errorStaff","responseStaff","delAccUrl","message","historyUrl","get","getAccUrl","getActiveAccUrl","getDormantAccUrl"],"mappings":"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","sourcesContent":["import chaiHttp from 'chai-http';\r\nimport chai from 'chai';\r\nimport app from '../index';\r\nimport UserService from '../services/user.service';\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst should = chai.should();\r\nchai.use(chaiHttp);\r\n\r\n// Set token variables\r\nconst client = {\r\n  email: 'neropaulej@gmail.com',\r\n  password: 'password',\r\n};\r\n\r\nconst staff = {\r\n  email: 'yetundegeorge@gmail.com',\r\n  password: 'password',\r\n};\r\n\r\nconst admin = {\r\n  email: 'yoshiyama@gmail.com',\r\n  password: 'password',\r\n};\r\n\r\nconst getClientToken = async () => {\r\n  const clientSignIn = await UserService.signIn(client);\r\n  const clientToken = clientSignIn.token;\r\n  return clientToken;\r\n};\r\n\r\nconst getStaffToken = async () => {\r\n  const staffSignIn = await UserService.signIn(staff);\r\n  const staffToken = staffSignIn.token;\r\n  return staffToken;\r\n};\r\n\r\nconst getAdminToken = async () => {\r\n  const adminSignIn = await UserService.signIn(admin);\r\n  const adminToken = adminSignIn.token;\r\n  return adminToken;\r\n};\r\n\r\nconst accountNumber = 23402001;\r\n\r\n// Test user create account\r\ndescribe('Testing user creating an account', () => {\r\n  const createAccUrl = '/api/v1/accounts';\r\n  it('should create an account for user if all parameters are given', async () => {\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .post(createAccUrl)\r\n      .set('x-access-token', token)\r\n      .send(accType)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(201);\r\n        response.body.should.be.a('object');\r\n        response.body.data.should.have.property('accountNumber');\r\n        response.body.data.should.have.property('firstName');\r\n        response.body.data.should.have.property('lastName');\r\n        response.body.data.should.have.property('email');\r\n        response.body.data.should.have.property('type');\r\n        response.body.data.should.have.property('openingBalance');\r\n      });\r\n  });\r\n\r\n  it('should not create an account if account type is not savings or current', async () => {\r\n    const accType = {\r\n      type: 'different',\r\n    };\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .post(createAccUrl)\r\n      .set('x-access-token', token)\r\n      .send(accType)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(400);\r\n        response.body.should.be.a('object');\r\n        response.body.error.should.equal('Account type must be savings or current and is required');\r\n      });\r\n  });\r\n\r\n  it('should not create an account if user is not a client', async () => {\r\n    const accType = {\r\n      type: 'savings',\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .post(createAccUrl)\r\n      .set('x-access-token', token)\r\n      .send(accType)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(401);\r\n        response.body.should.be.a('object');\r\n        response.body.error.should.equal('An account cannot be created for this user');\r\n      });\r\n  });\r\n});\r\n\r\n// Test Admin/Staff activate or deactivate account\r\ndescribe('Testing admin or staff activating and deactivating account', () => {\r\n  const accStatusUrl = '/api/v1/accounts/';\r\n  it('should change account status if all parameters are provided', async () => {\r\n    const accStatus = {\r\n      status: 'active',\r\n    };\r\n    const tokenStaff = await getStaffToken();\r\n    chai.request(app)\r\n      .patch(`${accStatusUrl}${accountNumber}`)\r\n      .set('x-access-token', tokenStaff)\r\n      .send(accStatus)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(200);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.data.should.have.property('accountNumber');\r\n        responseStaff.body.data.should.have.property('status');\r\n      });\r\n  });\r\n\r\n  it('should not change account status if status is not active or dormant', async () => {\r\n    const accStatus = {\r\n      status: 'different',\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .patch(`${accStatusUrl}${accountNumber}`)\r\n      .set('x-access-token', token)\r\n      .send(accStatus)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(400);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('Status must be active or dormant and is required');\r\n      });\r\n  });\r\n\r\n  it('should not change account status if user is not staff', async () => {\r\n    const accStatus = {\r\n      status: 'active',\r\n    };\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .patch(`${accStatusUrl}${accountNumber}`)\r\n      .set('x-access-token', token)\r\n      .send(accStatus)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(401);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('Unauthorized user');\r\n      });\r\n  });\r\n\r\n  it('should not change account status if account is not found', async () => {\r\n    const accStatus = {\r\n      status: 'active',\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .patch(`${accStatusUrl}123456`)\r\n      .set('x-access-token', token)\r\n      .send(accStatus)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(404);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('No account found');\r\n      });\r\n  });\r\n});\r\n\r\n// Test for Admin/Staff delete account\r\ndescribe('Testing admin or staff deleting account', () => {\r\n  const delAccUrl = '/api/v1/accounts/';\r\n  it('should delete account if all parameters are given', async () => {\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .delete(`${delAccUrl}${accountNumber + 1}`)\r\n      .set('x-access-token', token)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(200);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.message.should.equal('Account successfully deleted');\r\n      });\r\n  });\r\n\r\n  it('should not delete account if user is not staff', async () => {\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .delete(`${delAccUrl}${accountNumber + 2}`)\r\n      .set('x-access-token', token)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(403);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('Unauthorized user');\r\n      });\r\n  });\r\n\r\n  it('should not delete account if account does not exist', async () => {\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .delete(`${delAccUrl}123456`)\r\n      .set('x-access-token', token)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(400);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('No account found');\r\n      });\r\n  });\r\n});\r\n\r\n// Test for account transaction history\r\ndescribe('Testing get transaction history', () => {\r\n  const historyUrl = `/api/v1/accounts/${accountNumber}/transactions`;\r\n  it('should get all transaction history belonging to specified account number', async () => {\r\n    const token = await getAdminToken();\r\n    chai.request(app)\r\n      .get(historyUrl)\r\n      .set('x-access-token', token)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(200);\r\n        response.body.data.should.be.a('array');\r\n        response.body.data[0].should.be.a('object');\r\n        response.body.data[0].should.have.property('transactionId');\r\n        response.body.data[0].should.have.property('createdOn');\r\n        response.body.data[0].should.have.property('type');\r\n        response.body.data[0].should.have.property('accountNumber');\r\n        response.body.data[0].should.have.property('amount');\r\n        response.body.data[0].should.have.property('oldBalance');\r\n        response.body.data[0].should.have.property('newBalance');\r\n      });\r\n  });\r\n});\r\n\r\n// Test for get account details\r\ndescribe('Testing get account details', () => {\r\n  let getAccUrl = '/api/v1/accounts/23402004';\r\n  it('should get account details', async () => {\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .get(getAccUrl)\r\n      .set('x-access-token', token)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(200);\r\n        response.body.should.be.a('object');\r\n        response.body.data.should.have.property('createdOn');\r\n        response.body.data.should.have.property('accountNumber');\r\n        response.body.data.should.have.property('ownerEmail');\r\n        response.body.data.should.have.property('type');\r\n        response.body.data.should.have.property('status');\r\n        response.body.data.should.have.property('balance');\r\n      });\r\n  });\r\n\r\n  it('should not get account details if account number is wrong', async () => {\r\n    getAccUrl = '/api/v1/accounts/2340200';\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .get(getAccUrl)\r\n      .set('x-access-token', token)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(400);\r\n        response.body.should.be.a('object');\r\n        response.body.error.should.equal('No account with this account number');\r\n      });\r\n  });\r\n\r\n  it('should not get account details if no token', async () => {\r\n    getAccUrl = '/api/v1/accounts/2340200';\r\n    chai.request(app)\r\n      .get(getAccUrl)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(403);\r\n        response.body.should.be.a('object');\r\n        response.body.error.should.equal('No token provided.');\r\n      });\r\n  });\r\n});\r\n\r\n// Test for get all accounts\r\ndescribe('Testing get account details', () => {\r\n  const getAccUrl = '/api/v1/accounts';\r\n  it('should get all accounts', async () => {\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .get(getAccUrl)\r\n      .set('x-access-token', token)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(200);\r\n        response.body.should.be.a('object');\r\n        response.body.data.should.be.a('array');\r\n        response.body.data[0].should.have.property('createdOn');\r\n        response.body.data[0].should.have.property('accountNumber');\r\n        response.body.data[0].should.have.property('ownerEmail');\r\n        response.body.data[0].should.have.property('type');\r\n        response.body.data[0].should.have.property('status');\r\n        response.body.data[0].should.have.property('balance');\r\n      });\r\n  });\r\n\r\n  it('should get all active accounts', async () => {\r\n    const getActiveAccUrl = '/api/v1/accounts?status=active';\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .get(getActiveAccUrl)\r\n      .set('x-access-token', token)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(200);\r\n        response.body.should.be.a('object');\r\n        response.body.data.should.be.a('array');\r\n        response.body.data[0].should.have.property('createdOn');\r\n        response.body.data[0].should.have.property('accountNumber');\r\n        response.body.data[0].should.have.property('ownerEmail');\r\n        response.body.data[0].should.have.property('type');\r\n        response.body.data[0].should.have.property('status');\r\n        response.body.data[0].should.have.property('balance');\r\n      });\r\n  });\r\n\r\n  it('should get all dormant accounts', async () => {\r\n    const getDormantAccUrl = '/api/v1/accounts?status=dormant';\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .get(getDormantAccUrl)\r\n      .set('x-access-token', token)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(200);\r\n        response.body.should.be.a('object');\r\n        response.body.data.should.be.a('array');\r\n        response.body.data[0].should.have.property('createdOn');\r\n        response.body.data[0].should.have.property('accountNumber');\r\n        response.body.data[0].should.have.property('ownerEmail');\r\n        response.body.data[0].should.have.property('type');\r\n        response.body.data[0].should.have.property('status');\r\n        response.body.data[0].should.have.property('balance');\r\n      });\r\n  });\r\n\r\n  it('should not get accounts if user is not a staff', async () => {\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .get(getAccUrl)\r\n      .set('x-access-token', token)\r\n      .end((error, response) => {\r\n        response.body.should.have.status(403);\r\n        response.body.should.be.a('object');\r\n        response.body.error.should.equal('Unauthorized user');\r\n      });\r\n  });\r\n});\r\n"],"file":"account.test.js"}