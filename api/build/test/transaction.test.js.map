{"version":3,"sources":["../../src/test/transaction.test.js"],"names":["should","chai","use","chaiHttp","client","email","password","staff","getClientToken","UserService","signIn","clientSignIn","clientToken","token","getStaffToken","staffSignIn","staffToken","accountNumber","describe","transactionUrl","it","amount","request","app","post","set","send","end","errorStaff","responseStaff","body","have","status","be","a","data","property","error","equal","debitAmount","debitErr","debitRes"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AACA,IAAMA,MAAM,GAAGC,iBAAKD,MAAL,EAAf;;AACAC,iBAAKC,GAAL,CAASC,oBAAT,E,CAEA;;;AACA,IAAMC,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE,sBADM;AAEbC,EAAAA,QAAQ,EAAE;AAFG,CAAf;AAKA,IAAMC,KAAK,GAAG;AACZF,EAAAA,KAAK,EAAE,yBADK;AAEZC,EAAAA,QAAQ,EAAE;AAFE,CAAd;;AAKA,IAAME,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACMC,iBAAYC,MAAZ,CAAmBN,MAAnB,CADN;;AAAA;AACfO,YAAAA,YADe;AAEfC,YAAAA,WAFe,GAEDD,YAAY,CAACE,KAFZ;AAAA,6CAGdD,WAHc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdJ,cAAc;AAAA;AAAA;AAAA,GAApB;;AAMA,IAAMM,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACML,iBAAYC,MAAZ,CAAmBH,KAAnB,CADN;;AAAA;AACdQ,YAAAA,WADc;AAEdC,YAAAA,UAFc,GAEDD,WAAW,CAACF,KAFX;AAAA,8CAGbG,UAHa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbF,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAMA,IAAMG,aAAa,GAAG,QAAtB,C,CAEA;;AACAC,QAAQ,CAAC,4BAAD,EAA+B,YAAM;AAC3C,MAAMC,cAAc,GAAG,uBAAvB;AACAC,EAAAA,EAAE,CAAC,mDAAD;AAAA;AAAA;AAAA;AAAA,+BAAsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAChDC,YAAAA,MADgD,GACvC;AACbA,cAAAA,MAAM,EAAE;AADK,aADuC;AAAA;AAAA,mBAIlCP,aAAa,EAJqB;;AAAA;AAIhDD,YAAAA,KAJgD;;AAKtDZ,6BAAKqB,OAAL,CAAaC,iBAAb,EACGC,IADH,WACWL,cADX,SAC4BF,aAD5B,cAEGQ,GAFH,CAEO,gBAFP,EAEyBZ,KAFzB,EAGGa,IAHH,CAGQL,MAHR,EAIGM,GAJH,CAIO,UAACC,UAAD,EAAaC,aAAb,EAA+B;AAClCA,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0B+B,IAA1B,CAA+BC,MAA/B,CAAsC,GAAtC;AACAH,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0BiC,EAA1B,CAA6BC,CAA7B,CAA+B,QAA/B;AACAL,cAAAA,aAAa,CAACC,IAAd,CAAmBK,IAAnB,CAAwBnC,MAAxB,CAA+B+B,IAA/B,CAAoCK,QAApC,CAA6C,eAA7C;AACAP,cAAAA,aAAa,CAACC,IAAd,CAAmBK,IAAnB,CAAwBnC,MAAxB,CAA+B+B,IAA/B,CAAoCK,QAApC,CAA6C,eAA7C;AACAP,cAAAA,aAAa,CAACC,IAAd,CAAmBK,IAAnB,CAAwBnC,MAAxB,CAA+B+B,IAA/B,CAAoCK,QAApC,CAA6C,QAA7C;AACAP,cAAAA,aAAa,CAACC,IAAd,CAAmBK,IAAnB,CAAwBnC,MAAxB,CAA+B+B,IAA/B,CAAoCK,QAApC,CAA6C,SAA7C;AACAP,cAAAA,aAAa,CAACC,IAAd,CAAmBK,IAAnB,CAAwBnC,MAAxB,CAA+B+B,IAA/B,CAAoCK,QAApC,CAA6C,iBAA7C;AACAP,cAAAA,aAAa,CAACC,IAAd,CAAmBK,IAAnB,CAAwBnC,MAAxB,CAA+B+B,IAA/B,CAAoCK,QAApC,CAA6C,gBAA7C;AACD,aAbH;;AALsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtD,GAAF;AAqBAhB,EAAAA,EAAE,CAAC,qDAAD;AAAA;AAAA;AAAA;AAAA,+BAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAClDC,YAAAA,MADkD,GACzC;AACbA,cAAAA,MAAM,EAAE;AADK,aADyC;AAAA;AAAA,mBAIpCP,aAAa,EAJuB;;AAAA;AAIlDD,YAAAA,KAJkD;;AAKxDZ,6BAAKqB,OAAL,CAAaC,iBAAb,EACGC,IADH,WACWL,cADX,SAC4BF,aAD5B,cAEGQ,GAFH,CAEO,gBAFP,EAEyBZ,KAFzB,EAGGa,IAHH,CAGQL,MAHR,EAIGM,GAJH,CAIO,UAACC,UAAD,EAAaC,aAAb,EAA+B;AAClCA,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0B+B,IAA1B,CAA+BC,MAA/B,CAAsC,GAAtC;AACAH,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0BiC,EAA1B,CAA6BC,CAA7B,CAA+B,QAA/B;AACAL,cAAAA,aAAa,CACVC,IADH,CACQO,KADR,CACcrC,MADd,CACqBsC,KADrB,CAC2B,yCAD3B;AAED,aATH;;AALwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxD,GAAF;AAiBAlB,EAAAA,EAAE,CAAC,kDAAD;AAAA;AAAA;AAAA;AAAA,+BAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/CC,YAAAA,MAD+C,GACtC;AACbA,cAAAA,MAAM,EAAE;AADK,aADsC;AAAA;AAAA,mBAIjCb,cAAc,EAJmB;;AAAA;AAI/CK,YAAAA,KAJ+C;;AAKrDZ,6BAAKqB,OAAL,CAAaC,iBAAb,EACGC,IADH,WACWL,cADX,SAC4BF,aAD5B,cAEGQ,GAFH,CAEO,gBAFP,EAEyBZ,KAFzB,EAGGa,IAHH,CAGQL,MAHR,EAIGM,GAJH,CAIO,UAACC,UAAD,EAAaC,aAAb,EAA+B;AAClCA,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0B+B,IAA1B,CAA+BC,MAA/B,CAAsC,GAAtC;AACAH,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0BiC,EAA1B,CAA6BC,CAA7B,CAA+B,QAA/B;AACAL,cAAAA,aAAa,CAACC,IAAd,CAAmBO,KAAnB,CAAyBrC,MAAzB,CAAgCsC,KAAhC,CAAsC,mBAAtC;AACD,aARH;;AALqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArD,GAAF;AAgBAlB,EAAAA,EAAE,CAAC,4DAAD;AAAA;AAAA;AAAA;AAAA,+BAA+D;AAAA;AAAA;AAAA;AAAA;AAAA;AACzDC,YAAAA,MADyD,GAChD;AACbA,cAAAA,MAAM,EAAE;AADK,aADgD;AAAA;AAAA,mBAI3CP,aAAa,EAJ8B;;AAAA;AAIzDD,YAAAA,KAJyD;;AAK/DZ,6BAAKqB,OAAL,CAAaC,iBAAb,EACGC,IADH,WACWL,cADX,oBAEGM,GAFH,CAEO,gBAFP,EAEyBZ,KAFzB,EAGGa,IAHH,CAGQL,MAHR,EAIGM,GAJH,CAIO,UAACC,UAAD,EAAaC,aAAb,EAA+B;AAClCA,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0B+B,IAA1B,CAA+BC,MAA/B,CAAsC,GAAtC;AACAH,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0BiC,EAA1B,CAA6BC,CAA7B,CAA+B,QAA/B;AACAL,cAAAA,aAAa,CAACC,IAAd,CAAmBO,KAAnB,CAAyBrC,MAAzB,CAAgCsC,KAAhC,CAAsC,2CAAtC;AACD,aARH;;AAL+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/D,GAAF;AAeD,CAvEO,CAAR,C,CAyEA;;AACApB,QAAQ,CAAC,2BAAD,EAA8B,YAAM;AAC1C,MAAMC,cAAc,GAAG,uBAAvB;AACAC,EAAAA,EAAE,CAAC,kDAAD;AAAA;AAAA;AAAA;AAAA,+BAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/CmB,YAAAA,WAD+C,GACjC;AAClBlB,cAAAA,MAAM,EAAE;AADU,aADiC;AAAA;AAAA,mBAIjCP,aAAa,EAJoB;;AAAA;AAI/CD,YAAAA,KAJ+C;;AAKrDZ,6BAAKqB,OAAL,CAAaC,iBAAb,EACGC,IADH,WACWL,cADX,SAC4BF,aAD5B,aAEGQ,GAFH,CAEO,gBAFP,EAEyBZ,KAFzB,EAGGa,IAHH,CAGQa,WAHR,EAIGZ,GAJH,CAIO,UAACa,QAAD,EAAWC,QAAX,EAAwB;AAC3BA,cAAAA,QAAQ,CAACX,IAAT,CAAc9B,MAAd,CAAqB+B,IAArB,CAA0BC,MAA1B,CAAiC,GAAjC;AACAS,cAAAA,QAAQ,CAACX,IAAT,CAAc9B,MAAd,CAAqBiC,EAArB,CAAwBC,CAAxB,CAA0B,QAA1B;AACAO,cAAAA,QAAQ,CAACX,IAAT,CAAcK,IAAd,CAAmBnC,MAAnB,CAA0B+B,IAA1B,CAA+BK,QAA/B,CAAwC,eAAxC;AACAK,cAAAA,QAAQ,CAACX,IAAT,CAAcK,IAAd,CAAmBnC,MAAnB,CAA0B+B,IAA1B,CAA+BK,QAA/B,CAAwC,eAAxC;AACAK,cAAAA,QAAQ,CAACX,IAAT,CAAcK,IAAd,CAAmBnC,MAAnB,CAA0B+B,IAA1B,CAA+BK,QAA/B,CAAwC,QAAxC;AACAK,cAAAA,QAAQ,CAACX,IAAT,CAAcK,IAAd,CAAmBnC,MAAnB,CAA0B+B,IAA1B,CAA+BK,QAA/B,CAAwC,SAAxC;AACAK,cAAAA,QAAQ,CAACX,IAAT,CAAcK,IAAd,CAAmBnC,MAAnB,CAA0B+B,IAA1B,CAA+BK,QAA/B,CAAwC,iBAAxC;AACAK,cAAAA,QAAQ,CAACX,IAAT,CAAcK,IAAd,CAAmBnC,MAAnB,CAA0B+B,IAA1B,CAA+BK,QAA/B,CAAwC,gBAAxC;AACD,aAbH;;AALqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArD,GAAF;AAqBAhB,EAAAA,EAAE,CAAC,oDAAD;AAAA;AAAA;AAAA;AAAA,+BAAuD;AAAA;AAAA;AAAA;AAAA;AAAA;AACjDC,YAAAA,MADiD,GACxC;AACbA,cAAAA,MAAM,EAAE;AADK,aADwC;AAAA;AAAA,mBAInCP,aAAa,EAJsB;;AAAA;AAIjDD,YAAAA,KAJiD;;AAKvDZ,6BAAKqB,OAAL,CAAaC,iBAAb,EACGC,IADH,WACWL,cADX,SAC4BF,aAD5B,aAEGQ,GAFH,CAEO,gBAFP,EAEyBZ,KAFzB,EAGGa,IAHH,CAGQL,MAHR,EAIGM,GAJH,CAIO,UAACC,UAAD,EAAaC,aAAb,EAA+B;AAClCA,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0B+B,IAA1B,CAA+BC,MAA/B,CAAsC,GAAtC;AACAH,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0BiC,EAA1B,CAA6BC,CAA7B,CAA+B,QAA/B;AACAL,cAAAA,aAAa,CACVC,IADH,CACQO,KADR,CACcrC,MADd,CACqBsC,KADrB,CAC2B,yCAD3B;AAED,aATH;;AALuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvD,GAAF;AAiBAlB,EAAAA,EAAE,CAAC,iDAAD;AAAA;AAAA;AAAA;AAAA,+BAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9CC,YAAAA,MAD8C,GACrC;AACbA,cAAAA,MAAM,EAAE;AADK,aADqC;AAAA;AAAA,mBAIhCb,cAAc,EAJkB;;AAAA;AAI9CK,YAAAA,KAJ8C;;AAKpDZ,6BAAKqB,OAAL,CAAaC,iBAAb,EACGC,IADH,WACWL,cADX,SAC4BF,aAD5B,aAEGQ,GAFH,CAEO,gBAFP,EAEyBZ,KAFzB,EAGGa,IAHH,CAGQL,MAHR,EAIGM,GAJH,CAIO,UAACC,UAAD,EAAaC,aAAb,EAA+B;AAClCA,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0B+B,IAA1B,CAA+BC,MAA/B,CAAsC,GAAtC;AACAH,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0BiC,EAA1B,CAA6BC,CAA7B,CAA+B,QAA/B;AACAL,cAAAA,aAAa,CAACC,IAAd,CAAmBO,KAAnB,CAAyBrC,MAAzB,CAAgCsC,KAAhC,CAAsC,mBAAtC;AACD,aARH;;AALoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApD,GAAF;AAgBAlB,EAAAA,EAAE,CAAC,2DAAD;AAAA;AAAA;AAAA;AAAA,+BAA8D;AAAA;AAAA;AAAA;AAAA;AAAA;AACxDC,YAAAA,MADwD,GAC/C;AACbA,cAAAA,MAAM,EAAE;AADK,aAD+C;AAAA;AAAA,mBAI1CP,aAAa,EAJ6B;;AAAA;AAIxDD,YAAAA,KAJwD;;AAK9DZ,6BAAKqB,OAAL,CAAaC,iBAAb,EACGC,IADH,WACWL,cADX,mBAEGM,GAFH,CAEO,gBAFP,EAEyBZ,KAFzB,EAGGa,IAHH,CAGQL,MAHR,EAIGM,GAJH,CAIO,UAACC,UAAD,EAAaC,aAAb,EAA+B;AAClCA,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0B+B,IAA1B,CAA+BC,MAA/B,CAAsC,GAAtC;AACAH,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0BiC,EAA1B,CAA6BC,CAA7B,CAA+B,QAA/B;AACAL,cAAAA,aAAa,CAACC,IAAd,CAAmBO,KAAnB,CAAyBrC,MAAzB,CAAgCsC,KAAhC,CAAsC,2CAAtC;AACD,aARH;;AAL8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9D,GAAF;AAgBAlB,EAAAA,EAAE,CAAC,2DAAD;AAAA;AAAA;AAAA;AAAA,+BAA8D;AAAA;AAAA;AAAA;AAAA;AAAA;AACxDC,YAAAA,MADwD,GAC/C;AACbA,cAAAA,MAAM,EAAE;AADK,aAD+C;AAAA;AAAA,mBAI1CP,aAAa,EAJ6B;;AAAA;AAIxDD,YAAAA,KAJwD;;AAK9DZ,6BAAKqB,OAAL,CAAaC,iBAAb,EACGC,IADH,WACWL,cADX,SAC4BF,aAD5B,aAEGQ,GAFH,CAEO,gBAFP,EAEyBZ,KAFzB,EAGGa,IAHH,CAGQL,MAHR,EAIGM,GAJH,CAIO,UAACC,UAAD,EAAaC,aAAb,EAA+B;AAClCA,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0B+B,IAA1B,CAA+BC,MAA/B,CAAsC,GAAtC;AACAH,cAAAA,aAAa,CAACC,IAAd,CAAmB9B,MAAnB,CAA0BiC,EAA1B,CAA6BC,CAA7B,CAA+B,QAA/B;AACAL,cAAAA,aAAa,CACVC,IADH,CACQO,KADR,CACcrC,MADd,CACqBsC,KADrB,CAC2B,0CAD3B;AAED,aATH;;AAL8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9D,GAAF;AAgBD,CAxFO,CAAR","sourcesContent":["import chaiHttp from 'chai-http';\r\nimport chai from 'chai';\r\nimport app from '../index';\r\nimport UserService from '../services/user.service';\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst should = chai.should();\r\nchai.use(chaiHttp);\r\n\r\n// Set global variables\r\nconst client = {\r\n  email: 'neropaulej@gmail.com',\r\n  password: 'password',\r\n};\r\n\r\nconst staff = {\r\n  email: 'yetundegeorge@gmail.com',\r\n  password: 'password',\r\n};\r\n\r\nconst getClientToken = async () => {\r\n  const clientSignIn = await UserService.signIn(client);\r\n  const clientToken = clientSignIn.token;\r\n  return clientToken;\r\n};\r\n\r\nconst getStaffToken = async () => {\r\n  const staffSignIn = await UserService.signIn(staff);\r\n  const staffToken = staffSignIn.token;\r\n  return staffToken;\r\n};\r\n\r\nconst accountNumber = 23402001;\r\n\r\n// Test for credit transactions\r\ndescribe('Testing credit transaction', () => {\r\n  const transactionUrl = '/api/v1/transactions/';\r\n  it('should credit account if all parameters are given', async () => {\r\n    const amount = {\r\n      amount: 80000,\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .post(`${transactionUrl}${accountNumber}/credit`)\r\n      .set('x-access-token', token)\r\n      .send(amount)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(200);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.data.should.have.property('transactionId');\r\n        responseStaff.body.data.should.have.property('accountNumber');\r\n        responseStaff.body.data.should.have.property('amount');\r\n        responseStaff.body.data.should.have.property('cashier');\r\n        responseStaff.body.data.should.have.property('transactionType');\r\n        responseStaff.body.data.should.have.property('accountBalance');\r\n      });\r\n  });\r\n\r\n  it('should not credit account if amount is not a number', async () => {\r\n    const amount = {\r\n      amount: 'different',\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .post(`${transactionUrl}${accountNumber}/credit`)\r\n      .set('x-access-token', token)\r\n      .send(amount)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(400);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff\r\n          .body.error.should.equal('Amount must be a number and is required');\r\n      });\r\n  });\r\n\r\n  it('should not credit account if user is not cashier', async () => {\r\n    const amount = {\r\n      amount: 80000,\r\n    };\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .post(`${transactionUrl}${accountNumber}/credit`)\r\n      .set('x-access-token', token)\r\n      .send(amount)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(401);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('Unauthorized user');\r\n      });\r\n  });\r\n\r\n  it('should not credit account if account number does not exist', async () => {\r\n    const amount = {\r\n      amount: 80000,\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .post(`${transactionUrl}123456/credit`)\r\n      .set('x-access-token', token)\r\n      .send(amount)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(404);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('Account number does not match our records');\r\n      });\r\n  });\r\n});\r\n\r\n// Test for debit transactions\r\ndescribe('Testing debit transaction', () => {\r\n  const transactionUrl = '/api/v1/transactions/';\r\n  it('should debit account if all parameters are given', async () => {\r\n    const debitAmount = {\r\n      amount: 40000,\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .post(`${transactionUrl}${accountNumber}/debit`)\r\n      .set('x-access-token', token)\r\n      .send(debitAmount)\r\n      .end((debitErr, debitRes) => {\r\n        debitRes.body.should.have.status(200);\r\n        debitRes.body.should.be.a('object');\r\n        debitRes.body.data.should.have.property('transactionId');\r\n        debitRes.body.data.should.have.property('accountNumber');\r\n        debitRes.body.data.should.have.property('amount');\r\n        debitRes.body.data.should.have.property('cashier');\r\n        debitRes.body.data.should.have.property('transactionType');\r\n        debitRes.body.data.should.have.property('accountBalance');\r\n      });\r\n  });\r\n\r\n  it('should not debit account if amount is not a number', async () => {\r\n    const amount = {\r\n      amount: 'different',\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .post(`${transactionUrl}${accountNumber}/debit`)\r\n      .set('x-access-token', token)\r\n      .send(amount)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(400);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff\r\n          .body.error.should.equal('Amount must be a number and is required');\r\n      });\r\n  });\r\n\r\n  it('should not debit account if user is not cashier', async () => {\r\n    const amount = {\r\n      amount: 80000,\r\n    };\r\n    const token = await getClientToken();\r\n    chai.request(app)\r\n      .post(`${transactionUrl}${accountNumber}/debit`)\r\n      .set('x-access-token', token)\r\n      .send(amount)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(401);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('Unauthorized user');\r\n      });\r\n  });\r\n\r\n  it('should not debit account if account number does not exist', async () => {\r\n    const amount = {\r\n      amount: 80000,\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .post(`${transactionUrl}123456/debit`)\r\n      .set('x-access-token', token)\r\n      .send(amount)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(404);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff.body.error.should.equal('Account number does not match our records');\r\n      });\r\n  });\r\n\r\n  it('should not debit account if account balance is not enough', async () => {\r\n    const amount = {\r\n      amount: 800000,\r\n    };\r\n    const token = await getStaffToken();\r\n    chai.request(app)\r\n      .post(`${transactionUrl}${accountNumber}/debit`)\r\n      .set('x-access-token', token)\r\n      .send(amount)\r\n      .end((errorStaff, responseStaff) => {\r\n        responseStaff.body.should.have.status(400);\r\n        responseStaff.body.should.be.a('object');\r\n        responseStaff\r\n          .body.error.should.equal('Transaction declined: Insufficient funds');\r\n      });\r\n  });\r\n});\r\n"],"file":"transaction.test.js"}