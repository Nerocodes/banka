{"version":3,"sources":["../../../src/controllers/middleware/token.controller.js"],"names":["secret","process","env","SECRET","verifyToken","verify","req","res","next","token","headers","json","status","error","jwt","err","decoded","userId","id"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,MAAZ,IAAsB,aAArC;AAEA,IAAMC,WAAW,GAAG;AAClB;AACAC,EAAAA,MAFkB,kBAEXC,GAFW,EAENC,GAFM,EAEDC,IAFC,EAEK;AACrB,QAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,CAAd;;AACA,QAAI,CAACD,KAAL,EAAY;AACV,aAAOF,GAAG,CAACI,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEdC,QAAAA,KAAK,EAAE;AAFO,OAAT,CAAP;AAID;;AACDC,6BAAIT,MAAJ,CAAWI,KAAX,EAAkBT,MAAlB,EAA0B,UAACe,GAAD,EAAMC,OAAN,EAAkB;AAC1C,UAAID,GAAJ,EAAS;AACP,eAAOR,GAAG,CAACI,IAAJ,CAAS;AACdC,UAAAA,MAAM,EAAE,GADM;AAEdC,UAAAA,KAAK,EAAE;AAFO,SAAT,CAAP;AAID,OANyC,CAO1C;;;AACAP,MAAAA,GAAG,CAACW,MAAJ,GAAaD,OAAO,CAACE,EAArB;AACA,aAAOV,IAAI,EAAX;AACD,KAVD;AAWD;AArBiB,CAApB;eAyBeJ,W","sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nconst secret = process.env.SECRET || 'supersecret';\r\n\r\nconst verifyToken = {\r\n  // eslint-disable-next-line consistent-return\r\n  verify(req, res, next) {\r\n    const token = req.headers['x-access-token'];\r\n    if (!token) {\r\n      return res.json({\r\n        status: 403,\r\n        error: 'No token provided.',\r\n      });\r\n    }\r\n    jwt.verify(token, secret, (err, decoded) => {\r\n      if (err) {\r\n        return res.json({\r\n          status: 500,\r\n          error: 'Failed to authenticate token.',\r\n        });\r\n      }\r\n      // if everything good, save to request for use in other routes\r\n      req.userId = decoded.id;\r\n      return next();\r\n    });\r\n  },\r\n};\r\n\r\n\r\nexport default verifyToken;\r\n"],"file":"token.controller.js"}