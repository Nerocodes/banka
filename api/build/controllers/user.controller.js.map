{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["secret","process","env","SECRET","UserController","fetchAllUsers","req","res","allUsers","UserService","map","userObj","Object","defineProperty","enumerable","writable","json","status","data","addAUser","newUser","body","type","isAdmin","hashedPassword","bcrypt","hashSync","password","createdUser","addUser","token","jwt","sign","id","expiresIn","signIn","oldUser","foundUser","email","error","validPassword","compareSync","getSingleUser","params","getAUser"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcryptjs';\r\nimport UserService from '../services/user.service';\r\n\r\nconst secret = process.env.SECRET || 'supersecret';\r\n\r\nconst UserController = {\r\n  fetchAllUsers(req, res) {\r\n    const allUsers = UserService.fetchAllUsers();\r\n    // eslint-disable-next-line array-callback-return\r\n    allUsers.map((userObj) => {\r\n      Object.defineProperty(userObj, 'password', {\r\n        enumerable: false,\r\n        writable: true,\r\n      });\r\n    });\r\n    return res.json({\r\n      status: 200,\r\n      data: allUsers,\r\n    }).status(200);\r\n  },\r\n\r\n  addAUser(req, res) {\r\n    const newUser = req.body;\r\n    if (!newUser.type && !newUser.isAdmin) {\r\n      newUser.type = 'client';\r\n      newUser.isAdmin = false;\r\n    }\r\n    const hashedPassword = bcrypt.hashSync(newUser.password, 8);\r\n    newUser.password = hashedPassword;\r\n    const createdUser = UserService.addUser(newUser);\r\n    const token = jwt.sign({ id: createdUser.id }, secret, {\r\n      expiresIn: 86400,\r\n    });\r\n    createdUser.token = token;\r\n    Object.defineProperty(createdUser, 'password', {\r\n      enumerable: false,\r\n      writable: true,\r\n    });\r\n    return res.json({\r\n      status: 201,\r\n      data: createdUser,\r\n    }).status(201);\r\n  },\r\n\r\n  signIn(req, res) {\r\n    const oldUser = req.body;\r\n    const foundUser = UserService.signIn(oldUser);\r\n    if (!foundUser.email) {\r\n      return res.json({\r\n        status: 404,\r\n        error: 'no user with this email',\r\n      }).status(404);\r\n    }\r\n    const validPassword = bcrypt.compareSync(oldUser.password, foundUser.password);\r\n    if (!validPassword) {\r\n      return res.json({\r\n        status: 401,\r\n        error: 'wrong password',\r\n      }).status(401);\r\n    }\r\n    Object.defineProperty(foundUser, 'password', {\r\n      enumerable: false,\r\n      writable: true,\r\n    });\r\n    const token = jwt.sign({ id: foundUser.id }, secret, {\r\n      expiresIn: 86400, // expires in 24 hours\r\n    });\r\n    foundUser.token = token;\r\n    return res.json({\r\n      status: 201,\r\n      data: foundUser,\r\n    }).status(201);\r\n  },\r\n\r\n  getSingleUser(req, res) {\r\n    const { id } = req.params;\r\n    const foundUser = UserService.getAUser(id);\r\n    return res.json({\r\n      status: 201,\r\n      data: foundUser,\r\n    }).status(200);\r\n  },\r\n};\r\n\r\nexport default UserController;\r\n"],"file":"user.controller.js"}