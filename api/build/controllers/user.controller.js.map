{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["UserController","addAUser","req","res","newUser","body","type","isAdmin","firstName","json","status","error","lastName","email","password","hashedPassword","bcrypt","hashSync","UserService","addUser","createdUser","Object","defineProperty","enumerable","writable","data","signIn","oldUser","foundUser","validPassword","compareSync"],"mappings":"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","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport UserService from '../services/user.service';\r\n\r\n\r\nconst UserController = {\r\n  // fetchAllUsers(req, res) {\r\n  //   const allUsers = UserService.fetchAllUsers();\r\n  //   // eslint-disable-next-line array-callback-return\r\n  //   allUsers.map((userObj) => {\r\n  //     Object.defineProperty(userObj, 'password', {\r\n  //       enumerable: false,\r\n  //       writable: true,\r\n  //     });\r\n  //   });\r\n  //   return res.json({\r\n  //     status: 200,\r\n  //     data: allUsers,\r\n  //   }).status(200);\r\n  // },\r\n\r\n  async addAUser(req, res) {\r\n    const newUser = req.body;\r\n    if (!newUser.type && !newUser.isAdmin) {\r\n      newUser.type = 'client';\r\n      newUser.isAdmin = false;\r\n    }\r\n    if (!newUser.firstName) {\r\n      return res.json({\r\n        status: 400,\r\n        error: 'First Name field is required',\r\n      });\r\n    }\r\n    if (!newUser.lastName) {\r\n      return res.json({\r\n        status: 400,\r\n        error: 'Last Name field is required',\r\n      });\r\n    }\r\n    if (!newUser.email) {\r\n      return res.json({\r\n        status: 400,\r\n        error: 'Email field is required',\r\n      });\r\n    }\r\n    if (!newUser.password) {\r\n      return res.json({\r\n        status: 400,\r\n        error: 'Password field is required',\r\n      });\r\n    }\r\n    const hashedPassword = bcrypt.hashSync(newUser.password, 8);\r\n    newUser.password = hashedPassword;\r\n    const createdUser = await UserService.addUser(newUser);\r\n    Object.defineProperty(createdUser, 'password', {\r\n      enumerable: false,\r\n      writable: true,\r\n    });\r\n    return res.json({\r\n      status: 201,\r\n      data: createdUser,\r\n    });\r\n  },\r\n\r\n  async signIn(req, res) {\r\n    const oldUser = req.body;\r\n    if (!oldUser.email) {\r\n      return res.json({\r\n        status: 400,\r\n        error: 'Email field is required',\r\n      });\r\n    }\r\n    if (!oldUser.password) {\r\n      return res.json({\r\n        status: 400,\r\n        error: 'Password field is required',\r\n      });\r\n    }\r\n    const foundUser = await UserService.signIn(oldUser);\r\n    if (!foundUser.email) {\r\n      return res.json({\r\n        status: 404,\r\n        error: 'no user with this email',\r\n      }).status(404);\r\n    }\r\n    const validPassword = bcrypt.compareSync(oldUser.password, foundUser.password);\r\n    if (!validPassword) {\r\n      return res.json({\r\n        status: 401,\r\n        error: 'wrong password',\r\n      }).status(401);\r\n    }\r\n    Object.defineProperty(foundUser, 'password', {\r\n      enumerable: false,\r\n      writable: true,\r\n    });\r\n    return res.json({\r\n      status: 201,\r\n      data: foundUser,\r\n    }).status(201);\r\n  },\r\n\r\n  // getSingleUser(req, res) {\r\n  //   const { id } = req.params;\r\n  //   const foundUser = UserService.getAUser(id);\r\n  //   return res.json({\r\n  //     status: 201,\r\n  //     data: foundUser,\r\n  //   }).status(200);\r\n  // },\r\n};\r\n\r\nexport default UserController;\r\n"],"file":"user.controller.js"}