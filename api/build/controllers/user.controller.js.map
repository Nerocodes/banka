{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["UserController","addAUser","req","res","newUser","body","type","isAdmin","UserService","addUser","createdUser","error","json","status","data","signIn","oldUser","foundUser","email","getUserAccounts","params","accounts"],"mappings":";;;;;;;;;;;;;AAAA;;AAGA,IAAMA,cAAc,GAAG;AAEfC,EAAAA,QAFe;AAAA;AAAA;AAAA,kDAENC,GAFM,EAEDC,GAFC;AAAA;AAAA;AAAA;AAAA;AAAA;AAGbC,cAAAA,OAHa,GAGHF,GAAG,CAACG,IAHD;;AAInB,kBAAI,CAACD,OAAO,CAACE,IAAT,IAAiB,CAACF,OAAO,CAACG,OAA9B,EAAuC;AACrCH,gBAAAA,OAAO,CAACE,IAAR,GAAe,QAAf;AACAF,gBAAAA,OAAO,CAACG,OAAR,GAAkB,KAAlB;AACD;;AAPkB;AAAA,qBAQOC,iBAAYC,OAAZ,CAAoBL,OAApB,CARP;;AAAA;AAQbM,cAAAA,WARa;;AAAA,mBASfA,WAAW,CAACC,KATG;AAAA;AAAA;AAAA;;AAAA,+CAUVR,GAAG,CAACS,IAAJ,CAAS;AACdC,gBAAAA,MAAM,EAAE,GADM;AAEdC,gBAAAA,IAAI,EAAEJ,WAAW,CAACC;AAFJ,eAAT,CAVU;;AAAA;AAAA,+CAeZR,GAAG,CAACS,IAAJ,CAAS;AACdC,gBAAAA,MAAM,EAAE,GADM;AAEdC,gBAAAA,IAAI,EAAEJ;AAFQ,eAAT,CAfY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqBfK,EAAAA,MArBe;AAAA;AAAA;AAAA,mDAqBRb,GArBQ,EAqBHC,GArBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBba,cAAAA,OAtBa,GAsBHd,GAAG,CAACG,IAtBD;AAAA;AAAA,qBAuBKG,iBAAYO,MAAZ,CAAmBC,OAAnB,CAvBL;;AAAA;AAuBbC,cAAAA,SAvBa;;AAAA,kBAwBdA,SAAS,CAACC,KAxBI;AAAA;AAAA;AAAA;;AAAA,gDAyBVf,GAAG,CAACS,IAAJ,CAAS;AACdC,gBAAAA,MAAM,EAAE,GADM;AAEdF,gBAAAA,KAAK,EAAE;AAFO,eAAT,CAzBU;;AAAA;AAAA,gDA8BZR,GAAG,CAACS,IAAJ,CAAS;AACdC,gBAAAA,MAAM,EAAE,GADM;AAEdC,gBAAAA,IAAI,EAAEG;AAFQ,eAAT,CA9BY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoCfE,EAAAA,eApCe;AAAA;AAAA;AAAA,mDAoCCjB,GApCD,EAoCMC,GApCN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAqCIK,iBAAYW,eAAZ,CAA4BjB,GAAG,CAACkB,MAAhC,CArCJ;;AAAA;AAqCbC,cAAAA,QArCa;;AAAA,mBAsCfA,QAAQ,CAACV,KAtCM;AAAA;AAAA;AAAA;;AAAA,gDAuCVR,GAAG,CAACS,IAAJ,CAAS;AACdC,gBAAAA,MAAM,EAAE,GADM;AAEdF,gBAAAA,KAAK,EAAEU,QAAQ,CAACV;AAFF,eAAT,CAvCU;;AAAA;AAAA,gDA4CZR,GAAG,CAACS,IAAJ,CAAS;AACdC,gBAAAA,MAAM,EAAE,GADM;AAEdC,gBAAAA,IAAI,EAAEO;AAFQ,eAAT,CA5CY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAvB;eAmDerB,c","sourcesContent":["import UserService from '../services/user.service';\r\n\r\n\r\nconst UserController = {\r\n\r\n  async addAUser(req, res) {\r\n    const newUser = req.body;\r\n    if (!newUser.type && !newUser.isAdmin) {\r\n      newUser.type = 'client';\r\n      newUser.isAdmin = false;\r\n    }\r\n    const createdUser = await UserService.addUser(newUser);\r\n    if (createdUser.error) {\r\n      return res.json({\r\n        status: 400,\r\n        data: createdUser.error,\r\n      });\r\n    }\r\n    return res.json({\r\n      status: 201,\r\n      data: createdUser,\r\n    });\r\n  },\r\n\r\n  async signIn(req, res) {\r\n    const oldUser = req.body;\r\n    const foundUser = await UserService.signIn(oldUser);\r\n    if (!foundUser.email) {\r\n      return res.json({\r\n        status: 404,\r\n        error: 'no user with this email',\r\n      });\r\n    }\r\n    return res.json({\r\n      status: 201,\r\n      data: foundUser,\r\n    });\r\n  },\r\n\r\n  async getUserAccounts(req, res) {\r\n    const accounts = await UserService.getUserAccounts(req.params);\r\n    if (accounts.error) {\r\n      return res.json({\r\n        status: 400,\r\n        error: accounts.error,\r\n      });\r\n    }\r\n    return res.json({\r\n      status: 200,\r\n      data: accounts,\r\n    });\r\n  },\r\n};\r\n\r\nexport default UserController;\r\n"],"file":"user.controller.js"}